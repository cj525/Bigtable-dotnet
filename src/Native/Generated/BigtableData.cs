// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/bigtable/v1/bigtable_data.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Bigtable.V1 {

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class BigtableData {

    #region Descriptor
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BigtableData() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiZnb29nbGUvYmlndGFibGUvdjEvYmlndGFibGVfZGF0YS5wcm90bxISZ29v", 
            "Z2xlLmJpZ3RhYmxlLnYxIkAKA1JvdxILCgNrZXkYASABKAwSLAoIZmFtaWxp", 
            "ZXMYAiADKAsyGi5nb29nbGUuYmlndGFibGUudjEuRmFtaWx5IkMKBkZhbWls", 
            "eRIMCgRuYW1lGAEgASgJEisKB2NvbHVtbnMYAiADKAsyGi5nb29nbGUuYmln", 
            "dGFibGUudjEuQ29sdW1uIkQKBkNvbHVtbhIRCglxdWFsaWZpZXIYASABKAwS", 
            "JwoFY2VsbHMYAiADKAsyGC5nb29nbGUuYmlndGFibGUudjEuQ2VsbCI/CgRD", 
            "ZWxsEhgKEHRpbWVzdGFtcF9taWNyb3MYASABKAMSDQoFdmFsdWUYAiABKAwS", 
            "DgoGbGFiZWxzGAMgAygJIi4KCFJvd1JhbmdlEhEKCXN0YXJ0X2tleRgCIAEo", 
            "DBIPCgdlbmRfa2V5GAMgASgMItYBCgtDb2x1bW5SYW5nZRITCgtmYW1pbHlf", 
            "bmFtZRgBIAEoCRIjChlzdGFydF9xdWFsaWZpZXJfaW5jbHVzaXZlGAIgASgM", 
            "SAASIwoZc3RhcnRfcXVhbGlmaWVyX2V4Y2x1c2l2ZRgDIAEoDEgAEiEKF2Vu", 
            "ZF9xdWFsaWZpZXJfaW5jbHVzaXZlGAQgASgMSAESIQoXZW5kX3F1YWxpZmll", 
            "cl9leGNsdXNpdmUYBSABKAxIAUIRCg9zdGFydF9xdWFsaWZpZXJCDwoNZW5k", 
            "X3F1YWxpZmllciJOCg5UaW1lc3RhbXBSYW5nZRIeChZzdGFydF90aW1lc3Rh", 
            "bXBfbWljcm9zGAEgASgDEhwKFGVuZF90aW1lc3RhbXBfbWljcm9zGAIgASgD", 
            "IqgBCgpWYWx1ZVJhbmdlEh8KFXN0YXJ0X3ZhbHVlX2luY2x1c2l2ZRgBIAEo", 
            "DEgAEh8KFXN0YXJ0X3ZhbHVlX2V4Y2x1c2l2ZRgCIAEoDEgAEh0KE2VuZF92", 
            "YWx1ZV9pbmNsdXNpdmUYAyABKAxIARIdChNlbmRfdmFsdWVfZXhjbHVzaXZl", 
            "GAQgASgMSAFCDQoLc3RhcnRfdmFsdWVCCwoJZW5kX3ZhbHVlIt8ICglSb3dG", 
            "aWx0ZXISNAoFY2hhaW4YASABKAsyIy5nb29nbGUuYmlndGFibGUudjEuUm93", 
            "RmlsdGVyLkNoYWluSAASPgoKaW50ZXJsZWF2ZRgCIAEoCzIoLmdvb2dsZS5i", 
            "aWd0YWJsZS52MS5Sb3dGaWx0ZXIuSW50ZXJsZWF2ZUgAEjwKCWNvbmRpdGlv", 
            "bhgDIAEoCzInLmdvb2dsZS5iaWd0YWJsZS52MS5Sb3dGaWx0ZXIuQ29uZGl0", 
            "aW9uSAASDgoEc2luaxgQIAEoCEgAEhkKD3Bhc3NfYWxsX2ZpbHRlchgRIAEo", 
            "CEgAEhoKEGJsb2NrX2FsbF9maWx0ZXIYEiABKAhIABIeChRyb3dfa2V5X3Jl", 
            "Z2V4X2ZpbHRlchgEIAEoDEgAEhsKEXJvd19zYW1wbGVfZmlsdGVyGA4gASgB", 
            "SAASIgoYZmFtaWx5X25hbWVfcmVnZXhfZmlsdGVyGAUgASgJSAASJwodY29s", 
            "dW1uX3F1YWxpZmllcl9yZWdleF9maWx0ZXIYBiABKAxIABI+ChNjb2x1bW5f", 
            "cmFuZ2VfZmlsdGVyGAcgASgLMh8uZ29vZ2xlLmJpZ3RhYmxlLnYxLkNvbHVt", 
            "blJhbmdlSAASRAoWdGltZXN0YW1wX3JhbmdlX2ZpbHRlchgIIAEoCzIiLmdv", 
            "b2dsZS5iaWd0YWJsZS52MS5UaW1lc3RhbXBSYW5nZUgAEhwKEnZhbHVlX3Jl", 
            "Z2V4X2ZpbHRlchgJIAEoDEgAEjwKEnZhbHVlX3JhbmdlX2ZpbHRlchgPIAEo", 
            "CzIeLmdvb2dsZS5iaWd0YWJsZS52MS5WYWx1ZVJhbmdlSAASJQobY2VsbHNf", 
            "cGVyX3Jvd19vZmZzZXRfZmlsdGVyGAogASgFSAASJAoaY2VsbHNfcGVyX3Jv", 
            "d19saW1pdF9maWx0ZXIYCyABKAVIABInCh1jZWxsc19wZXJfY29sdW1uX2xp", 
            "bWl0X2ZpbHRlchgMIAEoBUgAEiEKF3N0cmlwX3ZhbHVlX3RyYW5zZm9ybWVy", 
            "GA0gASgISAASIQoXYXBwbHlfbGFiZWxfdHJhbnNmb3JtZXIYEyABKAlIABo3", 
            "CgVDaGFpbhIuCgdmaWx0ZXJzGAEgAygLMh0uZ29vZ2xlLmJpZ3RhYmxlLnYx", 
            "LlJvd0ZpbHRlcho8CgpJbnRlcmxlYXZlEi4KB2ZpbHRlcnMYASADKAsyHS5n", 
            "b29nbGUuYmlndGFibGUudjEuUm93RmlsdGVyGq0BCglDb25kaXRpb24SNwoQ", 
            "cHJlZGljYXRlX2ZpbHRlchgBIAEoCzIdLmdvb2dsZS5iaWd0YWJsZS52MS5S", 
            "b3dGaWx0ZXISMgoLdHJ1ZV9maWx0ZXIYAiABKAsyHS5nb29nbGUuYmlndGFi", 
            "bGUudjEuUm93RmlsdGVyEjMKDGZhbHNlX2ZpbHRlchgDIAEoCzIdLmdvb2ds", 
            "ZS5iaWd0YWJsZS52MS5Sb3dGaWx0ZXJCCAoGZmlsdGVyIskECghNdXRhdGlv", 
            "bhI4CghzZXRfY2VsbBgBIAEoCzIkLmdvb2dsZS5iaWd0YWJsZS52MS5NdXRh", 
            "dGlvbi5TZXRDZWxsSAASSwoSZGVsZXRlX2Zyb21fY29sdW1uGAIgASgLMi0u", 
            "Z29vZ2xlLmJpZ3RhYmxlLnYxLk11dGF0aW9uLkRlbGV0ZUZyb21Db2x1bW5I", 
            "ABJLChJkZWxldGVfZnJvbV9mYW1pbHkYAyABKAsyLS5nb29nbGUuYmlndGFi", 
            "bGUudjEuTXV0YXRpb24uRGVsZXRlRnJvbUZhbWlseUgAEkUKD2RlbGV0ZV9m", 
            "cm9tX3JvdxgEIAEoCzIqLmdvb2dsZS5iaWd0YWJsZS52MS5NdXRhdGlvbi5E", 
            "ZWxldGVGcm9tUm93SAAaYQoHU2V0Q2VsbBITCgtmYW1pbHlfbmFtZRgBIAEo", 
            "CRIYChBjb2x1bW5fcXVhbGlmaWVyGAIgASgMEhgKEHRpbWVzdGFtcF9taWNy", 
            "b3MYAyABKAMSDQoFdmFsdWUYBCABKAwaeQoQRGVsZXRlRnJvbUNvbHVtbhIT", 
            "CgtmYW1pbHlfbmFtZRgBIAEoCRIYChBjb2x1bW5fcXVhbGlmaWVyGAIgASgM", 
            "EjYKCnRpbWVfcmFuZ2UYAyABKAsyIi5nb29nbGUuYmlndGFibGUudjEuVGlt", 
            "ZXN0YW1wUmFuZ2UaJwoQRGVsZXRlRnJvbUZhbWlseRITCgtmYW1pbHlfbmFt", 
            "ZRgBIAEoCRoPCg1EZWxldGVGcm9tUm93QgoKCG11dGF0aW9uIoABChNSZWFk", 
            "TW9kaWZ5V3JpdGVSdWxlEhMKC2ZhbWlseV9uYW1lGAEgASgJEhgKEGNvbHVt", 
            "bl9xdWFsaWZpZXIYAiABKAwSFgoMYXBwZW5kX3ZhbHVlGAMgASgMSAASGgoQ", 
            "aW5jcmVtZW50X2Ftb3VudBgEIAEoA0gAQgYKBHJ1bGVCLQoWY29tLmdvb2ds", 
            "ZS5iaWd0YWJsZS52MUIRQmlndGFibGVEYXRhUHJvdG9QAWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedCodeInfo(null, new pbr::GeneratedCodeInfo[] {
            new pbr::GeneratedCodeInfo(typeof(global::Google.Bigtable.V1.Row), new[]{ "Key", "Families" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Google.Bigtable.V1.Family), new[]{ "Name", "Columns" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Google.Bigtable.V1.Column), new[]{ "Qualifier", "Cells" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Google.Bigtable.V1.Cell), new[]{ "TimestampMicros", "Value", "Labels" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Google.Bigtable.V1.RowRange), new[]{ "StartKey", "EndKey" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Google.Bigtable.V1.ColumnRange), new[]{ "FamilyName", "StartQualifierInclusive", "StartQualifierExclusive", "EndQualifierInclusive", "EndQualifierExclusive" }, new[]{ "StartQualifier", "EndQualifier" }, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Google.Bigtable.V1.TimestampRange), new[]{ "StartTimestampMicros", "EndTimestampMicros" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Google.Bigtable.V1.ValueRange), new[]{ "StartValueInclusive", "StartValueExclusive", "EndValueInclusive", "EndValueExclusive" }, new[]{ "StartValue", "EndValue" }, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Google.Bigtable.V1.RowFilter), new[]{ "Chain", "Interleave", "Condition", "Sink", "PassAllFilter", "BlockAllFilter", "RowKeyRegexFilter", "RowSampleFilter", "FamilyNameRegexFilter", "ColumnQualifierRegexFilter", "ColumnRangeFilter", "TimestampRangeFilter", "ValueRegexFilter", "ValueRangeFilter", "CellsPerRowOffsetFilter", "CellsPerRowLimitFilter", "CellsPerColumnLimitFilter", "StripValueTransformer", "ApplyLabelTransformer" }, new[]{ "Filter" }, null, new pbr::GeneratedCodeInfo[] { new pbr::GeneratedCodeInfo(typeof(global::Google.Bigtable.V1.RowFilter.Types.Chain), new[]{ "Filters" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Google.Bigtable.V1.RowFilter.Types.Interleave), new[]{ "Filters" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Google.Bigtable.V1.RowFilter.Types.Condition), new[]{ "PredicateFilter", "TrueFilter", "FalseFilter" }, null, null, null)}),
            new pbr::GeneratedCodeInfo(typeof(global::Google.Bigtable.V1.Mutation), new[]{ "SetCell", "DeleteFromColumn", "DeleteFromFamily", "DeleteFromRow" }, new[]{ "Mutation" }, null, new pbr::GeneratedCodeInfo[] { new pbr::GeneratedCodeInfo(typeof(global::Google.Bigtable.V1.Mutation.Types.SetCell), new[]{ "FamilyName", "ColumnQualifier", "TimestampMicros", "Value" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Google.Bigtable.V1.Mutation.Types.DeleteFromColumn), new[]{ "FamilyName", "ColumnQualifier", "TimeRange" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Google.Bigtable.V1.Mutation.Types.DeleteFromFamily), new[]{ "FamilyName" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Google.Bigtable.V1.Mutation.Types.DeleteFromRow), null, null, null, null)}),
            new pbr::GeneratedCodeInfo(typeof(global::Google.Bigtable.V1.ReadModifyWriteRule), new[]{ "FamilyName", "ColumnQualifier", "AppendValue", "IncrementAmount" }, new[]{ "Rule" }, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Row : pb::IMessage<Row> {
    private static readonly pb::MessageParser<Row> _parser = new pb::MessageParser<Row>(() => new Row());
    public static pb::MessageParser<Row> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Bigtable.V1.BigtableData.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Row() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Row(Row other) : this() {
      key_ = other.key_;
      families_ = other.families_.Clone();
    }

    public Row Clone() {
      return new Row(this);
    }

    public const int KeyFieldNumber = 1;
    private pb::ByteString key_ = pb::ByteString.Empty;
    public pb::ByteString Key {
      get { return key_; }
      set {
        key_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int FamiliesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Google.Bigtable.V1.Family> _repeated_families_codec
        = pb::FieldCodec.ForMessage(18, global::Google.Bigtable.V1.Family.Parser);
    private readonly pbc::RepeatedField<global::Google.Bigtable.V1.Family> families_ = new pbc::RepeatedField<global::Google.Bigtable.V1.Family>();
    public pbc::RepeatedField<global::Google.Bigtable.V1.Family> Families {
      get { return families_; }
    }

    public override bool Equals(object other) {
      return Equals(other as Row);
    }

    public bool Equals(Row other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if(!families_.Equals(other.families_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      hash ^= families_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Key);
      }
      families_.WriteTo(output, _repeated_families_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Key);
      }
      size += families_.CalculateSize(_repeated_families_codec);
      return size;
    }

    public void MergeFrom(Row other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      families_.Add(other.families_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Key = input.ReadBytes();
            break;
          }
          case 18: {
            families_.AddEntriesFrom(input, _repeated_families_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Family : pb::IMessage<Family> {
    private static readonly pb::MessageParser<Family> _parser = new pb::MessageParser<Family>(() => new Family());
    public static pb::MessageParser<Family> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Bigtable.V1.BigtableData.Descriptor.MessageTypes[1]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Family() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Family(Family other) : this() {
      name_ = other.name_;
      columns_ = other.columns_.Clone();
    }

    public Family Clone() {
      return new Family(this);
    }

    public const int NameFieldNumber = 1;
    private string name_ = "";
    public string Name {
      get { return name_; }
      set {
        name_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int ColumnsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Google.Bigtable.V1.Column> _repeated_columns_codec
        = pb::FieldCodec.ForMessage(18, global::Google.Bigtable.V1.Column.Parser);
    private readonly pbc::RepeatedField<global::Google.Bigtable.V1.Column> columns_ = new pbc::RepeatedField<global::Google.Bigtable.V1.Column>();
    public pbc::RepeatedField<global::Google.Bigtable.V1.Column> Columns {
      get { return columns_; }
    }

    public override bool Equals(object other) {
      return Equals(other as Family);
    }

    public bool Equals(Family other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if(!columns_.Equals(other.columns_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= columns_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      columns_.WriteTo(output, _repeated_columns_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += columns_.CalculateSize(_repeated_columns_codec);
      return size;
    }

    public void MergeFrom(Family other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      columns_.Add(other.columns_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            columns_.AddEntriesFrom(input, _repeated_columns_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Column : pb::IMessage<Column> {
    private static readonly pb::MessageParser<Column> _parser = new pb::MessageParser<Column>(() => new Column());
    public static pb::MessageParser<Column> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Bigtable.V1.BigtableData.Descriptor.MessageTypes[2]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Column() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Column(Column other) : this() {
      qualifier_ = other.qualifier_;
      cells_ = other.cells_.Clone();
    }

    public Column Clone() {
      return new Column(this);
    }

    public const int QualifierFieldNumber = 1;
    private pb::ByteString qualifier_ = pb::ByteString.Empty;
    public pb::ByteString Qualifier {
      get { return qualifier_; }
      set {
        qualifier_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int CellsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Google.Bigtable.V1.Cell> _repeated_cells_codec
        = pb::FieldCodec.ForMessage(18, global::Google.Bigtable.V1.Cell.Parser);
    private readonly pbc::RepeatedField<global::Google.Bigtable.V1.Cell> cells_ = new pbc::RepeatedField<global::Google.Bigtable.V1.Cell>();
    public pbc::RepeatedField<global::Google.Bigtable.V1.Cell> Cells {
      get { return cells_; }
    }

    public override bool Equals(object other) {
      return Equals(other as Column);
    }

    public bool Equals(Column other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Qualifier != other.Qualifier) return false;
      if(!cells_.Equals(other.cells_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Qualifier.Length != 0) hash ^= Qualifier.GetHashCode();
      hash ^= cells_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Qualifier.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Qualifier);
      }
      cells_.WriteTo(output, _repeated_cells_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (Qualifier.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Qualifier);
      }
      size += cells_.CalculateSize(_repeated_cells_codec);
      return size;
    }

    public void MergeFrom(Column other) {
      if (other == null) {
        return;
      }
      if (other.Qualifier.Length != 0) {
        Qualifier = other.Qualifier;
      }
      cells_.Add(other.cells_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Qualifier = input.ReadBytes();
            break;
          }
          case 18: {
            cells_.AddEntriesFrom(input, _repeated_cells_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Cell : pb::IMessage<Cell> {
    private static readonly pb::MessageParser<Cell> _parser = new pb::MessageParser<Cell>(() => new Cell());
    public static pb::MessageParser<Cell> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Bigtable.V1.BigtableData.Descriptor.MessageTypes[3]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Cell() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Cell(Cell other) : this() {
      timestampMicros_ = other.timestampMicros_;
      value_ = other.value_;
      labels_ = other.labels_.Clone();
    }

    public Cell Clone() {
      return new Cell(this);
    }

    public const int TimestampMicrosFieldNumber = 1;
    private long timestampMicros_;
    public long TimestampMicros {
      get { return timestampMicros_; }
      set {
        timestampMicros_ = value;
      }
    }

    public const int ValueFieldNumber = 2;
    private pb::ByteString value_ = pb::ByteString.Empty;
    public pb::ByteString Value {
      get { return value_; }
      set {
        value_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int LabelsFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_labels_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> labels_ = new pbc::RepeatedField<string>();
    public pbc::RepeatedField<string> Labels {
      get { return labels_; }
    }

    public override bool Equals(object other) {
      return Equals(other as Cell);
    }

    public bool Equals(Cell other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TimestampMicros != other.TimestampMicros) return false;
      if (Value != other.Value) return false;
      if(!labels_.Equals(other.labels_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (TimestampMicros != 0L) hash ^= TimestampMicros.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      hash ^= labels_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (TimestampMicros != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(TimestampMicros);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Value);
      }
      labels_.WriteTo(output, _repeated_labels_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (TimestampMicros != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TimestampMicros);
      }
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Value);
      }
      size += labels_.CalculateSize(_repeated_labels_codec);
      return size;
    }

    public void MergeFrom(Cell other) {
      if (other == null) {
        return;
      }
      if (other.TimestampMicros != 0L) {
        TimestampMicros = other.TimestampMicros;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
      labels_.Add(other.labels_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TimestampMicros = input.ReadInt64();
            break;
          }
          case 18: {
            Value = input.ReadBytes();
            break;
          }
          case 26: {
            labels_.AddEntriesFrom(input, _repeated_labels_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class RowRange : pb::IMessage<RowRange> {
    private static readonly pb::MessageParser<RowRange> _parser = new pb::MessageParser<RowRange>(() => new RowRange());
    public static pb::MessageParser<RowRange> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Bigtable.V1.BigtableData.Descriptor.MessageTypes[4]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public RowRange() {
      OnConstruction();
    }

    partial void OnConstruction();

    public RowRange(RowRange other) : this() {
      startKey_ = other.startKey_;
      endKey_ = other.endKey_;
    }

    public RowRange Clone() {
      return new RowRange(this);
    }

    public const int StartKeyFieldNumber = 2;
    private pb::ByteString startKey_ = pb::ByteString.Empty;
    public pb::ByteString StartKey {
      get { return startKey_; }
      set {
        startKey_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int EndKeyFieldNumber = 3;
    private pb::ByteString endKey_ = pb::ByteString.Empty;
    public pb::ByteString EndKey {
      get { return endKey_; }
      set {
        endKey_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as RowRange);
    }

    public bool Equals(RowRange other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StartKey != other.StartKey) return false;
      if (EndKey != other.EndKey) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (StartKey.Length != 0) hash ^= StartKey.GetHashCode();
      if (EndKey.Length != 0) hash ^= EndKey.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (StartKey.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(StartKey);
      }
      if (EndKey.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(EndKey);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (StartKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(StartKey);
      }
      if (EndKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EndKey);
      }
      return size;
    }

    public void MergeFrom(RowRange other) {
      if (other == null) {
        return;
      }
      if (other.StartKey.Length != 0) {
        StartKey = other.StartKey;
      }
      if (other.EndKey.Length != 0) {
        EndKey = other.EndKey;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 18: {
            StartKey = input.ReadBytes();
            break;
          }
          case 26: {
            EndKey = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ColumnRange : pb::IMessage<ColumnRange> {
    private static readonly pb::MessageParser<ColumnRange> _parser = new pb::MessageParser<ColumnRange>(() => new ColumnRange());
    public static pb::MessageParser<ColumnRange> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Bigtable.V1.BigtableData.Descriptor.MessageTypes[5]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public ColumnRange() {
      OnConstruction();
    }

    partial void OnConstruction();

    public ColumnRange(ColumnRange other) : this() {
      familyName_ = other.familyName_;
      switch (other.StartQualifierCase) {
        case StartQualifierOneofCase.StartQualifierInclusive:
          StartQualifierInclusive = other.StartQualifierInclusive;
          break;
        case StartQualifierOneofCase.StartQualifierExclusive:
          StartQualifierExclusive = other.StartQualifierExclusive;
          break;
      }

      switch (other.EndQualifierCase) {
        case EndQualifierOneofCase.EndQualifierInclusive:
          EndQualifierInclusive = other.EndQualifierInclusive;
          break;
        case EndQualifierOneofCase.EndQualifierExclusive:
          EndQualifierExclusive = other.EndQualifierExclusive;
          break;
      }

    }

    public ColumnRange Clone() {
      return new ColumnRange(this);
    }

    public const int FamilyNameFieldNumber = 1;
    private string familyName_ = "";
    public string FamilyName {
      get { return familyName_; }
      set {
        familyName_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int StartQualifierInclusiveFieldNumber = 2;
    public pb::ByteString StartQualifierInclusive {
      get { return startQualifierCase_ == StartQualifierOneofCase.StartQualifierInclusive ? (pb::ByteString) startQualifier_ : pb::ByteString.Empty; }
      set {
        startQualifier_ = pb::Preconditions.CheckNotNull(value, "value");
        startQualifierCase_ = StartQualifierOneofCase.StartQualifierInclusive;
      }
    }

    public const int StartQualifierExclusiveFieldNumber = 3;
    public pb::ByteString StartQualifierExclusive {
      get { return startQualifierCase_ == StartQualifierOneofCase.StartQualifierExclusive ? (pb::ByteString) startQualifier_ : pb::ByteString.Empty; }
      set {
        startQualifier_ = pb::Preconditions.CheckNotNull(value, "value");
        startQualifierCase_ = StartQualifierOneofCase.StartQualifierExclusive;
      }
    }

    public const int EndQualifierInclusiveFieldNumber = 4;
    public pb::ByteString EndQualifierInclusive {
      get { return endQualifierCase_ == EndQualifierOneofCase.EndQualifierInclusive ? (pb::ByteString) endQualifier_ : pb::ByteString.Empty; }
      set {
        endQualifier_ = pb::Preconditions.CheckNotNull(value, "value");
        endQualifierCase_ = EndQualifierOneofCase.EndQualifierInclusive;
      }
    }

    public const int EndQualifierExclusiveFieldNumber = 5;
    public pb::ByteString EndQualifierExclusive {
      get { return endQualifierCase_ == EndQualifierOneofCase.EndQualifierExclusive ? (pb::ByteString) endQualifier_ : pb::ByteString.Empty; }
      set {
        endQualifier_ = pb::Preconditions.CheckNotNull(value, "value");
        endQualifierCase_ = EndQualifierOneofCase.EndQualifierExclusive;
      }
    }

    private object startQualifier_;
    public enum StartQualifierOneofCase {
      None = 0,
      StartQualifierInclusive = 2,
      StartQualifierExclusive = 3,
    }
    private StartQualifierOneofCase startQualifierCase_ = StartQualifierOneofCase.None;
    public StartQualifierOneofCase StartQualifierCase {
      get { return startQualifierCase_; }
    }

    public void ClearStartQualifier() {
      startQualifierCase_ = StartQualifierOneofCase.None;
      startQualifier_ = null;
    }

    private object endQualifier_;
    public enum EndQualifierOneofCase {
      None = 0,
      EndQualifierInclusive = 4,
      EndQualifierExclusive = 5,
    }
    private EndQualifierOneofCase endQualifierCase_ = EndQualifierOneofCase.None;
    public EndQualifierOneofCase EndQualifierCase {
      get { return endQualifierCase_; }
    }

    public void ClearEndQualifier() {
      endQualifierCase_ = EndQualifierOneofCase.None;
      endQualifier_ = null;
    }

    public override bool Equals(object other) {
      return Equals(other as ColumnRange);
    }

    public bool Equals(ColumnRange other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FamilyName != other.FamilyName) return false;
      if (StartQualifierInclusive != other.StartQualifierInclusive) return false;
      if (StartQualifierExclusive != other.StartQualifierExclusive) return false;
      if (EndQualifierInclusive != other.EndQualifierInclusive) return false;
      if (EndQualifierExclusive != other.EndQualifierExclusive) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (FamilyName.Length != 0) hash ^= FamilyName.GetHashCode();
      if (startQualifierCase_ == StartQualifierOneofCase.StartQualifierInclusive) hash ^= StartQualifierInclusive.GetHashCode();
      if (startQualifierCase_ == StartQualifierOneofCase.StartQualifierExclusive) hash ^= StartQualifierExclusive.GetHashCode();
      if (endQualifierCase_ == EndQualifierOneofCase.EndQualifierInclusive) hash ^= EndQualifierInclusive.GetHashCode();
      if (endQualifierCase_ == EndQualifierOneofCase.EndQualifierExclusive) hash ^= EndQualifierExclusive.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (FamilyName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FamilyName);
      }
      if (startQualifierCase_ == StartQualifierOneofCase.StartQualifierInclusive) {
        output.WriteRawTag(18);
        output.WriteBytes(StartQualifierInclusive);
      }
      if (startQualifierCase_ == StartQualifierOneofCase.StartQualifierExclusive) {
        output.WriteRawTag(26);
        output.WriteBytes(StartQualifierExclusive);
      }
      if (endQualifierCase_ == EndQualifierOneofCase.EndQualifierInclusive) {
        output.WriteRawTag(34);
        output.WriteBytes(EndQualifierInclusive);
      }
      if (endQualifierCase_ == EndQualifierOneofCase.EndQualifierExclusive) {
        output.WriteRawTag(42);
        output.WriteBytes(EndQualifierExclusive);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (FamilyName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FamilyName);
      }
      if (startQualifierCase_ == StartQualifierOneofCase.StartQualifierInclusive) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(StartQualifierInclusive);
      }
      if (startQualifierCase_ == StartQualifierOneofCase.StartQualifierExclusive) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(StartQualifierExclusive);
      }
      if (endQualifierCase_ == EndQualifierOneofCase.EndQualifierInclusive) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EndQualifierInclusive);
      }
      if (endQualifierCase_ == EndQualifierOneofCase.EndQualifierExclusive) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EndQualifierExclusive);
      }
      return size;
    }

    public void MergeFrom(ColumnRange other) {
      if (other == null) {
        return;
      }
      if (other.FamilyName.Length != 0) {
        FamilyName = other.FamilyName;
      }
      switch (other.StartQualifierCase) {
        case StartQualifierOneofCase.StartQualifierInclusive:
          StartQualifierInclusive = other.StartQualifierInclusive;
          break;
        case StartQualifierOneofCase.StartQualifierExclusive:
          StartQualifierExclusive = other.StartQualifierExclusive;
          break;
      }

      switch (other.EndQualifierCase) {
        case EndQualifierOneofCase.EndQualifierInclusive:
          EndQualifierInclusive = other.EndQualifierInclusive;
          break;
        case EndQualifierOneofCase.EndQualifierExclusive:
          EndQualifierExclusive = other.EndQualifierExclusive;
          break;
      }

    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            FamilyName = input.ReadString();
            break;
          }
          case 18: {
            StartQualifierInclusive = input.ReadBytes();
            break;
          }
          case 26: {
            StartQualifierExclusive = input.ReadBytes();
            break;
          }
          case 34: {
            EndQualifierInclusive = input.ReadBytes();
            break;
          }
          case 42: {
            EndQualifierExclusive = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class TimestampRange : pb::IMessage<TimestampRange> {
    private static readonly pb::MessageParser<TimestampRange> _parser = new pb::MessageParser<TimestampRange>(() => new TimestampRange());
    public static pb::MessageParser<TimestampRange> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Bigtable.V1.BigtableData.Descriptor.MessageTypes[6]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public TimestampRange() {
      OnConstruction();
    }

    partial void OnConstruction();

    public TimestampRange(TimestampRange other) : this() {
      startTimestampMicros_ = other.startTimestampMicros_;
      endTimestampMicros_ = other.endTimestampMicros_;
    }

    public TimestampRange Clone() {
      return new TimestampRange(this);
    }

    public const int StartTimestampMicrosFieldNumber = 1;
    private long startTimestampMicros_;
    public long StartTimestampMicros {
      get { return startTimestampMicros_; }
      set {
        startTimestampMicros_ = value;
      }
    }

    public const int EndTimestampMicrosFieldNumber = 2;
    private long endTimestampMicros_;
    public long EndTimestampMicros {
      get { return endTimestampMicros_; }
      set {
        endTimestampMicros_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as TimestampRange);
    }

    public bool Equals(TimestampRange other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StartTimestampMicros != other.StartTimestampMicros) return false;
      if (EndTimestampMicros != other.EndTimestampMicros) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (StartTimestampMicros != 0L) hash ^= StartTimestampMicros.GetHashCode();
      if (EndTimestampMicros != 0L) hash ^= EndTimestampMicros.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (StartTimestampMicros != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(StartTimestampMicros);
      }
      if (EndTimestampMicros != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(EndTimestampMicros);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (StartTimestampMicros != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartTimestampMicros);
      }
      if (EndTimestampMicros != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EndTimestampMicros);
      }
      return size;
    }

    public void MergeFrom(TimestampRange other) {
      if (other == null) {
        return;
      }
      if (other.StartTimestampMicros != 0L) {
        StartTimestampMicros = other.StartTimestampMicros;
      }
      if (other.EndTimestampMicros != 0L) {
        EndTimestampMicros = other.EndTimestampMicros;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            StartTimestampMicros = input.ReadInt64();
            break;
          }
          case 16: {
            EndTimestampMicros = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ValueRange : pb::IMessage<ValueRange> {
    private static readonly pb::MessageParser<ValueRange> _parser = new pb::MessageParser<ValueRange>(() => new ValueRange());
    public static pb::MessageParser<ValueRange> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Bigtable.V1.BigtableData.Descriptor.MessageTypes[7]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public ValueRange() {
      OnConstruction();
    }

    partial void OnConstruction();

    public ValueRange(ValueRange other) : this() {
      switch (other.StartValueCase) {
        case StartValueOneofCase.StartValueInclusive:
          StartValueInclusive = other.StartValueInclusive;
          break;
        case StartValueOneofCase.StartValueExclusive:
          StartValueExclusive = other.StartValueExclusive;
          break;
      }

      switch (other.EndValueCase) {
        case EndValueOneofCase.EndValueInclusive:
          EndValueInclusive = other.EndValueInclusive;
          break;
        case EndValueOneofCase.EndValueExclusive:
          EndValueExclusive = other.EndValueExclusive;
          break;
      }

    }

    public ValueRange Clone() {
      return new ValueRange(this);
    }

    public const int StartValueInclusiveFieldNumber = 1;
    public pb::ByteString StartValueInclusive {
      get { return startValueCase_ == StartValueOneofCase.StartValueInclusive ? (pb::ByteString) startValue_ : pb::ByteString.Empty; }
      set {
        startValue_ = pb::Preconditions.CheckNotNull(value, "value");
        startValueCase_ = StartValueOneofCase.StartValueInclusive;
      }
    }

    public const int StartValueExclusiveFieldNumber = 2;
    public pb::ByteString StartValueExclusive {
      get { return startValueCase_ == StartValueOneofCase.StartValueExclusive ? (pb::ByteString) startValue_ : pb::ByteString.Empty; }
      set {
        startValue_ = pb::Preconditions.CheckNotNull(value, "value");
        startValueCase_ = StartValueOneofCase.StartValueExclusive;
      }
    }

    public const int EndValueInclusiveFieldNumber = 3;
    public pb::ByteString EndValueInclusive {
      get { return endValueCase_ == EndValueOneofCase.EndValueInclusive ? (pb::ByteString) endValue_ : pb::ByteString.Empty; }
      set {
        endValue_ = pb::Preconditions.CheckNotNull(value, "value");
        endValueCase_ = EndValueOneofCase.EndValueInclusive;
      }
    }

    public const int EndValueExclusiveFieldNumber = 4;
    public pb::ByteString EndValueExclusive {
      get { return endValueCase_ == EndValueOneofCase.EndValueExclusive ? (pb::ByteString) endValue_ : pb::ByteString.Empty; }
      set {
        endValue_ = pb::Preconditions.CheckNotNull(value, "value");
        endValueCase_ = EndValueOneofCase.EndValueExclusive;
      }
    }

    private object startValue_;
    public enum StartValueOneofCase {
      None = 0,
      StartValueInclusive = 1,
      StartValueExclusive = 2,
    }
    private StartValueOneofCase startValueCase_ = StartValueOneofCase.None;
    public StartValueOneofCase StartValueCase {
      get { return startValueCase_; }
    }

    public void ClearStartValue() {
      startValueCase_ = StartValueOneofCase.None;
      startValue_ = null;
    }

    private object endValue_;
    public enum EndValueOneofCase {
      None = 0,
      EndValueInclusive = 3,
      EndValueExclusive = 4,
    }
    private EndValueOneofCase endValueCase_ = EndValueOneofCase.None;
    public EndValueOneofCase EndValueCase {
      get { return endValueCase_; }
    }

    public void ClearEndValue() {
      endValueCase_ = EndValueOneofCase.None;
      endValue_ = null;
    }

    public override bool Equals(object other) {
      return Equals(other as ValueRange);
    }

    public bool Equals(ValueRange other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StartValueInclusive != other.StartValueInclusive) return false;
      if (StartValueExclusive != other.StartValueExclusive) return false;
      if (EndValueInclusive != other.EndValueInclusive) return false;
      if (EndValueExclusive != other.EndValueExclusive) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (startValueCase_ == StartValueOneofCase.StartValueInclusive) hash ^= StartValueInclusive.GetHashCode();
      if (startValueCase_ == StartValueOneofCase.StartValueExclusive) hash ^= StartValueExclusive.GetHashCode();
      if (endValueCase_ == EndValueOneofCase.EndValueInclusive) hash ^= EndValueInclusive.GetHashCode();
      if (endValueCase_ == EndValueOneofCase.EndValueExclusive) hash ^= EndValueExclusive.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (startValueCase_ == StartValueOneofCase.StartValueInclusive) {
        output.WriteRawTag(10);
        output.WriteBytes(StartValueInclusive);
      }
      if (startValueCase_ == StartValueOneofCase.StartValueExclusive) {
        output.WriteRawTag(18);
        output.WriteBytes(StartValueExclusive);
      }
      if (endValueCase_ == EndValueOneofCase.EndValueInclusive) {
        output.WriteRawTag(26);
        output.WriteBytes(EndValueInclusive);
      }
      if (endValueCase_ == EndValueOneofCase.EndValueExclusive) {
        output.WriteRawTag(34);
        output.WriteBytes(EndValueExclusive);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (startValueCase_ == StartValueOneofCase.StartValueInclusive) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(StartValueInclusive);
      }
      if (startValueCase_ == StartValueOneofCase.StartValueExclusive) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(StartValueExclusive);
      }
      if (endValueCase_ == EndValueOneofCase.EndValueInclusive) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EndValueInclusive);
      }
      if (endValueCase_ == EndValueOneofCase.EndValueExclusive) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EndValueExclusive);
      }
      return size;
    }

    public void MergeFrom(ValueRange other) {
      if (other == null) {
        return;
      }
      switch (other.StartValueCase) {
        case StartValueOneofCase.StartValueInclusive:
          StartValueInclusive = other.StartValueInclusive;
          break;
        case StartValueOneofCase.StartValueExclusive:
          StartValueExclusive = other.StartValueExclusive;
          break;
      }

      switch (other.EndValueCase) {
        case EndValueOneofCase.EndValueInclusive:
          EndValueInclusive = other.EndValueInclusive;
          break;
        case EndValueOneofCase.EndValueExclusive:
          EndValueExclusive = other.EndValueExclusive;
          break;
      }

    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            StartValueInclusive = input.ReadBytes();
            break;
          }
          case 18: {
            StartValueExclusive = input.ReadBytes();
            break;
          }
          case 26: {
            EndValueInclusive = input.ReadBytes();
            break;
          }
          case 34: {
            EndValueExclusive = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class RowFilter : pb::IMessage<RowFilter> {
    private static readonly pb::MessageParser<RowFilter> _parser = new pb::MessageParser<RowFilter>(() => new RowFilter());
    public static pb::MessageParser<RowFilter> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Bigtable.V1.BigtableData.Descriptor.MessageTypes[8]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public RowFilter() {
      OnConstruction();
    }

    partial void OnConstruction();

    public RowFilter(RowFilter other) : this() {
      switch (other.FilterCase) {
        case FilterOneofCase.Chain:
          Chain = other.Chain.Clone();
          break;
        case FilterOneofCase.Interleave:
          Interleave = other.Interleave.Clone();
          break;
        case FilterOneofCase.Condition:
          Condition = other.Condition.Clone();
          break;
        case FilterOneofCase.Sink:
          Sink = other.Sink;
          break;
        case FilterOneofCase.PassAllFilter:
          PassAllFilter = other.PassAllFilter;
          break;
        case FilterOneofCase.BlockAllFilter:
          BlockAllFilter = other.BlockAllFilter;
          break;
        case FilterOneofCase.RowKeyRegexFilter:
          RowKeyRegexFilter = other.RowKeyRegexFilter;
          break;
        case FilterOneofCase.RowSampleFilter:
          RowSampleFilter = other.RowSampleFilter;
          break;
        case FilterOneofCase.FamilyNameRegexFilter:
          FamilyNameRegexFilter = other.FamilyNameRegexFilter;
          break;
        case FilterOneofCase.ColumnQualifierRegexFilter:
          ColumnQualifierRegexFilter = other.ColumnQualifierRegexFilter;
          break;
        case FilterOneofCase.ColumnRangeFilter:
          ColumnRangeFilter = other.ColumnRangeFilter.Clone();
          break;
        case FilterOneofCase.TimestampRangeFilter:
          TimestampRangeFilter = other.TimestampRangeFilter.Clone();
          break;
        case FilterOneofCase.ValueRegexFilter:
          ValueRegexFilter = other.ValueRegexFilter;
          break;
        case FilterOneofCase.ValueRangeFilter:
          ValueRangeFilter = other.ValueRangeFilter.Clone();
          break;
        case FilterOneofCase.CellsPerRowOffsetFilter:
          CellsPerRowOffsetFilter = other.CellsPerRowOffsetFilter;
          break;
        case FilterOneofCase.CellsPerRowLimitFilter:
          CellsPerRowLimitFilter = other.CellsPerRowLimitFilter;
          break;
        case FilterOneofCase.CellsPerColumnLimitFilter:
          CellsPerColumnLimitFilter = other.CellsPerColumnLimitFilter;
          break;
        case FilterOneofCase.StripValueTransformer:
          StripValueTransformer = other.StripValueTransformer;
          break;
        case FilterOneofCase.ApplyLabelTransformer:
          ApplyLabelTransformer = other.ApplyLabelTransformer;
          break;
      }

    }

    public RowFilter Clone() {
      return new RowFilter(this);
    }

    public const int ChainFieldNumber = 1;
    public global::Google.Bigtable.V1.RowFilter.Types.Chain Chain {
      get { return filterCase_ == FilterOneofCase.Chain ? (global::Google.Bigtable.V1.RowFilter.Types.Chain) filter_ : null; }
      set {
        filter_ = value;
        filterCase_ = value == null ? FilterOneofCase.None : FilterOneofCase.Chain;
      }
    }

    public const int InterleaveFieldNumber = 2;
    public global::Google.Bigtable.V1.RowFilter.Types.Interleave Interleave {
      get { return filterCase_ == FilterOneofCase.Interleave ? (global::Google.Bigtable.V1.RowFilter.Types.Interleave) filter_ : null; }
      set {
        filter_ = value;
        filterCase_ = value == null ? FilterOneofCase.None : FilterOneofCase.Interleave;
      }
    }

    public const int ConditionFieldNumber = 3;
    public global::Google.Bigtable.V1.RowFilter.Types.Condition Condition {
      get { return filterCase_ == FilterOneofCase.Condition ? (global::Google.Bigtable.V1.RowFilter.Types.Condition) filter_ : null; }
      set {
        filter_ = value;
        filterCase_ = value == null ? FilterOneofCase.None : FilterOneofCase.Condition;
      }
    }

    public const int SinkFieldNumber = 16;
    public bool Sink {
      get { return filterCase_ == FilterOneofCase.Sink ? (bool) filter_ : false; }
      set {
        filter_ = value;
        filterCase_ = FilterOneofCase.Sink;
      }
    }

    public const int PassAllFilterFieldNumber = 17;
    public bool PassAllFilter {
      get { return filterCase_ == FilterOneofCase.PassAllFilter ? (bool) filter_ : false; }
      set {
        filter_ = value;
        filterCase_ = FilterOneofCase.PassAllFilter;
      }
    }

    public const int BlockAllFilterFieldNumber = 18;
    public bool BlockAllFilter {
      get { return filterCase_ == FilterOneofCase.BlockAllFilter ? (bool) filter_ : false; }
      set {
        filter_ = value;
        filterCase_ = FilterOneofCase.BlockAllFilter;
      }
    }

    public const int RowKeyRegexFilterFieldNumber = 4;
    public pb::ByteString RowKeyRegexFilter {
      get { return filterCase_ == FilterOneofCase.RowKeyRegexFilter ? (pb::ByteString) filter_ : pb::ByteString.Empty; }
      set {
        filter_ = pb::Preconditions.CheckNotNull(value, "value");
        filterCase_ = FilterOneofCase.RowKeyRegexFilter;
      }
    }

    public const int RowSampleFilterFieldNumber = 14;
    public double RowSampleFilter {
      get { return filterCase_ == FilterOneofCase.RowSampleFilter ? (double) filter_ : 0D; }
      set {
        filter_ = value;
        filterCase_ = FilterOneofCase.RowSampleFilter;
      }
    }

    public const int FamilyNameRegexFilterFieldNumber = 5;
    public string FamilyNameRegexFilter {
      get { return filterCase_ == FilterOneofCase.FamilyNameRegexFilter ? (string) filter_ : ""; }
      set {
        filter_ = pb::Preconditions.CheckNotNull(value, "value");
        filterCase_ = FilterOneofCase.FamilyNameRegexFilter;
      }
    }

    public const int ColumnQualifierRegexFilterFieldNumber = 6;
    public pb::ByteString ColumnQualifierRegexFilter {
      get { return filterCase_ == FilterOneofCase.ColumnQualifierRegexFilter ? (pb::ByteString) filter_ : pb::ByteString.Empty; }
      set {
        filter_ = pb::Preconditions.CheckNotNull(value, "value");
        filterCase_ = FilterOneofCase.ColumnQualifierRegexFilter;
      }
    }

    public const int ColumnRangeFilterFieldNumber = 7;
    public global::Google.Bigtable.V1.ColumnRange ColumnRangeFilter {
      get { return filterCase_ == FilterOneofCase.ColumnRangeFilter ? (global::Google.Bigtable.V1.ColumnRange) filter_ : null; }
      set {
        filter_ = value;
        filterCase_ = value == null ? FilterOneofCase.None : FilterOneofCase.ColumnRangeFilter;
      }
    }

    public const int TimestampRangeFilterFieldNumber = 8;
    public global::Google.Bigtable.V1.TimestampRange TimestampRangeFilter {
      get { return filterCase_ == FilterOneofCase.TimestampRangeFilter ? (global::Google.Bigtable.V1.TimestampRange) filter_ : null; }
      set {
        filter_ = value;
        filterCase_ = value == null ? FilterOneofCase.None : FilterOneofCase.TimestampRangeFilter;
      }
    }

    public const int ValueRegexFilterFieldNumber = 9;
    public pb::ByteString ValueRegexFilter {
      get { return filterCase_ == FilterOneofCase.ValueRegexFilter ? (pb::ByteString) filter_ : pb::ByteString.Empty; }
      set {
        filter_ = pb::Preconditions.CheckNotNull(value, "value");
        filterCase_ = FilterOneofCase.ValueRegexFilter;
      }
    }

    public const int ValueRangeFilterFieldNumber = 15;
    public global::Google.Bigtable.V1.ValueRange ValueRangeFilter {
      get { return filterCase_ == FilterOneofCase.ValueRangeFilter ? (global::Google.Bigtable.V1.ValueRange) filter_ : null; }
      set {
        filter_ = value;
        filterCase_ = value == null ? FilterOneofCase.None : FilterOneofCase.ValueRangeFilter;
      }
    }

    public const int CellsPerRowOffsetFilterFieldNumber = 10;
    public int CellsPerRowOffsetFilter {
      get { return filterCase_ == FilterOneofCase.CellsPerRowOffsetFilter ? (int) filter_ : 0; }
      set {
        filter_ = value;
        filterCase_ = FilterOneofCase.CellsPerRowOffsetFilter;
      }
    }

    public const int CellsPerRowLimitFilterFieldNumber = 11;
    public int CellsPerRowLimitFilter {
      get { return filterCase_ == FilterOneofCase.CellsPerRowLimitFilter ? (int) filter_ : 0; }
      set {
        filter_ = value;
        filterCase_ = FilterOneofCase.CellsPerRowLimitFilter;
      }
    }

    public const int CellsPerColumnLimitFilterFieldNumber = 12;
    public int CellsPerColumnLimitFilter {
      get { return filterCase_ == FilterOneofCase.CellsPerColumnLimitFilter ? (int) filter_ : 0; }
      set {
        filter_ = value;
        filterCase_ = FilterOneofCase.CellsPerColumnLimitFilter;
      }
    }

    public const int StripValueTransformerFieldNumber = 13;
    public bool StripValueTransformer {
      get { return filterCase_ == FilterOneofCase.StripValueTransformer ? (bool) filter_ : false; }
      set {
        filter_ = value;
        filterCase_ = FilterOneofCase.StripValueTransformer;
      }
    }

    public const int ApplyLabelTransformerFieldNumber = 19;
    public string ApplyLabelTransformer {
      get { return filterCase_ == FilterOneofCase.ApplyLabelTransformer ? (string) filter_ : ""; }
      set {
        filter_ = pb::Preconditions.CheckNotNull(value, "value");
        filterCase_ = FilterOneofCase.ApplyLabelTransformer;
      }
    }

    private object filter_;
    public enum FilterOneofCase {
      None = 0,
      Chain = 1,
      Interleave = 2,
      Condition = 3,
      Sink = 16,
      PassAllFilter = 17,
      BlockAllFilter = 18,
      RowKeyRegexFilter = 4,
      RowSampleFilter = 14,
      FamilyNameRegexFilter = 5,
      ColumnQualifierRegexFilter = 6,
      ColumnRangeFilter = 7,
      TimestampRangeFilter = 8,
      ValueRegexFilter = 9,
      ValueRangeFilter = 15,
      CellsPerRowOffsetFilter = 10,
      CellsPerRowLimitFilter = 11,
      CellsPerColumnLimitFilter = 12,
      StripValueTransformer = 13,
      ApplyLabelTransformer = 19,
    }
    private FilterOneofCase filterCase_ = FilterOneofCase.None;
    public FilterOneofCase FilterCase {
      get { return filterCase_; }
    }

    public void ClearFilter() {
      filterCase_ = FilterOneofCase.None;
      filter_ = null;
    }

    public override bool Equals(object other) {
      return Equals(other as RowFilter);
    }

    public bool Equals(RowFilter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Chain, other.Chain)) return false;
      if (!object.Equals(Interleave, other.Interleave)) return false;
      if (!object.Equals(Condition, other.Condition)) return false;
      if (Sink != other.Sink) return false;
      if (PassAllFilter != other.PassAllFilter) return false;
      if (BlockAllFilter != other.BlockAllFilter) return false;
      if (RowKeyRegexFilter != other.RowKeyRegexFilter) return false;
      if (RowSampleFilter != other.RowSampleFilter) return false;
      if (FamilyNameRegexFilter != other.FamilyNameRegexFilter) return false;
      if (ColumnQualifierRegexFilter != other.ColumnQualifierRegexFilter) return false;
      if (!object.Equals(ColumnRangeFilter, other.ColumnRangeFilter)) return false;
      if (!object.Equals(TimestampRangeFilter, other.TimestampRangeFilter)) return false;
      if (ValueRegexFilter != other.ValueRegexFilter) return false;
      if (!object.Equals(ValueRangeFilter, other.ValueRangeFilter)) return false;
      if (CellsPerRowOffsetFilter != other.CellsPerRowOffsetFilter) return false;
      if (CellsPerRowLimitFilter != other.CellsPerRowLimitFilter) return false;
      if (CellsPerColumnLimitFilter != other.CellsPerColumnLimitFilter) return false;
      if (StripValueTransformer != other.StripValueTransformer) return false;
      if (ApplyLabelTransformer != other.ApplyLabelTransformer) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (filterCase_ == FilterOneofCase.Chain) hash ^= Chain.GetHashCode();
      if (filterCase_ == FilterOneofCase.Interleave) hash ^= Interleave.GetHashCode();
      if (filterCase_ == FilterOneofCase.Condition) hash ^= Condition.GetHashCode();
      if (filterCase_ == FilterOneofCase.Sink) hash ^= Sink.GetHashCode();
      if (filterCase_ == FilterOneofCase.PassAllFilter) hash ^= PassAllFilter.GetHashCode();
      if (filterCase_ == FilterOneofCase.BlockAllFilter) hash ^= BlockAllFilter.GetHashCode();
      if (filterCase_ == FilterOneofCase.RowKeyRegexFilter) hash ^= RowKeyRegexFilter.GetHashCode();
      if (filterCase_ == FilterOneofCase.RowSampleFilter) hash ^= RowSampleFilter.GetHashCode();
      if (filterCase_ == FilterOneofCase.FamilyNameRegexFilter) hash ^= FamilyNameRegexFilter.GetHashCode();
      if (filterCase_ == FilterOneofCase.ColumnQualifierRegexFilter) hash ^= ColumnQualifierRegexFilter.GetHashCode();
      if (filterCase_ == FilterOneofCase.ColumnRangeFilter) hash ^= ColumnRangeFilter.GetHashCode();
      if (filterCase_ == FilterOneofCase.TimestampRangeFilter) hash ^= TimestampRangeFilter.GetHashCode();
      if (filterCase_ == FilterOneofCase.ValueRegexFilter) hash ^= ValueRegexFilter.GetHashCode();
      if (filterCase_ == FilterOneofCase.ValueRangeFilter) hash ^= ValueRangeFilter.GetHashCode();
      if (filterCase_ == FilterOneofCase.CellsPerRowOffsetFilter) hash ^= CellsPerRowOffsetFilter.GetHashCode();
      if (filterCase_ == FilterOneofCase.CellsPerRowLimitFilter) hash ^= CellsPerRowLimitFilter.GetHashCode();
      if (filterCase_ == FilterOneofCase.CellsPerColumnLimitFilter) hash ^= CellsPerColumnLimitFilter.GetHashCode();
      if (filterCase_ == FilterOneofCase.StripValueTransformer) hash ^= StripValueTransformer.GetHashCode();
      if (filterCase_ == FilterOneofCase.ApplyLabelTransformer) hash ^= ApplyLabelTransformer.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (filterCase_ == FilterOneofCase.Chain) {
        output.WriteRawTag(10);
        output.WriteMessage(Chain);
      }
      if (filterCase_ == FilterOneofCase.Interleave) {
        output.WriteRawTag(18);
        output.WriteMessage(Interleave);
      }
      if (filterCase_ == FilterOneofCase.Condition) {
        output.WriteRawTag(26);
        output.WriteMessage(Condition);
      }
      if (filterCase_ == FilterOneofCase.RowKeyRegexFilter) {
        output.WriteRawTag(34);
        output.WriteBytes(RowKeyRegexFilter);
      }
      if (filterCase_ == FilterOneofCase.FamilyNameRegexFilter) {
        output.WriteRawTag(42);
        output.WriteString(FamilyNameRegexFilter);
      }
      if (filterCase_ == FilterOneofCase.ColumnQualifierRegexFilter) {
        output.WriteRawTag(50);
        output.WriteBytes(ColumnQualifierRegexFilter);
      }
      if (filterCase_ == FilterOneofCase.ColumnRangeFilter) {
        output.WriteRawTag(58);
        output.WriteMessage(ColumnRangeFilter);
      }
      if (filterCase_ == FilterOneofCase.TimestampRangeFilter) {
        output.WriteRawTag(66);
        output.WriteMessage(TimestampRangeFilter);
      }
      if (filterCase_ == FilterOneofCase.ValueRegexFilter) {
        output.WriteRawTag(74);
        output.WriteBytes(ValueRegexFilter);
      }
      if (filterCase_ == FilterOneofCase.CellsPerRowOffsetFilter) {
        output.WriteRawTag(80);
        output.WriteInt32(CellsPerRowOffsetFilter);
      }
      if (filterCase_ == FilterOneofCase.CellsPerRowLimitFilter) {
        output.WriteRawTag(88);
        output.WriteInt32(CellsPerRowLimitFilter);
      }
      if (filterCase_ == FilterOneofCase.CellsPerColumnLimitFilter) {
        output.WriteRawTag(96);
        output.WriteInt32(CellsPerColumnLimitFilter);
      }
      if (filterCase_ == FilterOneofCase.StripValueTransformer) {
        output.WriteRawTag(104);
        output.WriteBool(StripValueTransformer);
      }
      if (filterCase_ == FilterOneofCase.RowSampleFilter) {
        output.WriteRawTag(113);
        output.WriteDouble(RowSampleFilter);
      }
      if (filterCase_ == FilterOneofCase.ValueRangeFilter) {
        output.WriteRawTag(122);
        output.WriteMessage(ValueRangeFilter);
      }
      if (filterCase_ == FilterOneofCase.Sink) {
        output.WriteRawTag(128, 1);
        output.WriteBool(Sink);
      }
      if (filterCase_ == FilterOneofCase.PassAllFilter) {
        output.WriteRawTag(136, 1);
        output.WriteBool(PassAllFilter);
      }
      if (filterCase_ == FilterOneofCase.BlockAllFilter) {
        output.WriteRawTag(144, 1);
        output.WriteBool(BlockAllFilter);
      }
      if (filterCase_ == FilterOneofCase.ApplyLabelTransformer) {
        output.WriteRawTag(154, 1);
        output.WriteString(ApplyLabelTransformer);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (filterCase_ == FilterOneofCase.Chain) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Chain);
      }
      if (filterCase_ == FilterOneofCase.Interleave) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Interleave);
      }
      if (filterCase_ == FilterOneofCase.Condition) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Condition);
      }
      if (filterCase_ == FilterOneofCase.Sink) {
        size += 2 + 1;
      }
      if (filterCase_ == FilterOneofCase.PassAllFilter) {
        size += 2 + 1;
      }
      if (filterCase_ == FilterOneofCase.BlockAllFilter) {
        size += 2 + 1;
      }
      if (filterCase_ == FilterOneofCase.RowKeyRegexFilter) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(RowKeyRegexFilter);
      }
      if (filterCase_ == FilterOneofCase.RowSampleFilter) {
        size += 1 + 8;
      }
      if (filterCase_ == FilterOneofCase.FamilyNameRegexFilter) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FamilyNameRegexFilter);
      }
      if (filterCase_ == FilterOneofCase.ColumnQualifierRegexFilter) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ColumnQualifierRegexFilter);
      }
      if (filterCase_ == FilterOneofCase.ColumnRangeFilter) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ColumnRangeFilter);
      }
      if (filterCase_ == FilterOneofCase.TimestampRangeFilter) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TimestampRangeFilter);
      }
      if (filterCase_ == FilterOneofCase.ValueRegexFilter) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ValueRegexFilter);
      }
      if (filterCase_ == FilterOneofCase.ValueRangeFilter) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ValueRangeFilter);
      }
      if (filterCase_ == FilterOneofCase.CellsPerRowOffsetFilter) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CellsPerRowOffsetFilter);
      }
      if (filterCase_ == FilterOneofCase.CellsPerRowLimitFilter) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CellsPerRowLimitFilter);
      }
      if (filterCase_ == FilterOneofCase.CellsPerColumnLimitFilter) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CellsPerColumnLimitFilter);
      }
      if (filterCase_ == FilterOneofCase.StripValueTransformer) {
        size += 1 + 1;
      }
      if (filterCase_ == FilterOneofCase.ApplyLabelTransformer) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ApplyLabelTransformer);
      }
      return size;
    }

    public void MergeFrom(RowFilter other) {
      if (other == null) {
        return;
      }
      switch (other.FilterCase) {
        case FilterOneofCase.Chain:
          Chain = other.Chain;
          break;
        case FilterOneofCase.Interleave:
          Interleave = other.Interleave;
          break;
        case FilterOneofCase.Condition:
          Condition = other.Condition;
          break;
        case FilterOneofCase.Sink:
          Sink = other.Sink;
          break;
        case FilterOneofCase.PassAllFilter:
          PassAllFilter = other.PassAllFilter;
          break;
        case FilterOneofCase.BlockAllFilter:
          BlockAllFilter = other.BlockAllFilter;
          break;
        case FilterOneofCase.RowKeyRegexFilter:
          RowKeyRegexFilter = other.RowKeyRegexFilter;
          break;
        case FilterOneofCase.RowSampleFilter:
          RowSampleFilter = other.RowSampleFilter;
          break;
        case FilterOneofCase.FamilyNameRegexFilter:
          FamilyNameRegexFilter = other.FamilyNameRegexFilter;
          break;
        case FilterOneofCase.ColumnQualifierRegexFilter:
          ColumnQualifierRegexFilter = other.ColumnQualifierRegexFilter;
          break;
        case FilterOneofCase.ColumnRangeFilter:
          ColumnRangeFilter = other.ColumnRangeFilter;
          break;
        case FilterOneofCase.TimestampRangeFilter:
          TimestampRangeFilter = other.TimestampRangeFilter;
          break;
        case FilterOneofCase.ValueRegexFilter:
          ValueRegexFilter = other.ValueRegexFilter;
          break;
        case FilterOneofCase.ValueRangeFilter:
          ValueRangeFilter = other.ValueRangeFilter;
          break;
        case FilterOneofCase.CellsPerRowOffsetFilter:
          CellsPerRowOffsetFilter = other.CellsPerRowOffsetFilter;
          break;
        case FilterOneofCase.CellsPerRowLimitFilter:
          CellsPerRowLimitFilter = other.CellsPerRowLimitFilter;
          break;
        case FilterOneofCase.CellsPerColumnLimitFilter:
          CellsPerColumnLimitFilter = other.CellsPerColumnLimitFilter;
          break;
        case FilterOneofCase.StripValueTransformer:
          StripValueTransformer = other.StripValueTransformer;
          break;
        case FilterOneofCase.ApplyLabelTransformer:
          ApplyLabelTransformer = other.ApplyLabelTransformer;
          break;
      }

    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::Google.Bigtable.V1.RowFilter.Types.Chain subBuilder = new global::Google.Bigtable.V1.RowFilter.Types.Chain();
            if (filterCase_ == FilterOneofCase.Chain) {
              subBuilder.MergeFrom(Chain);
            }
            input.ReadMessage(subBuilder);
            Chain = subBuilder;
            break;
          }
          case 18: {
            global::Google.Bigtable.V1.RowFilter.Types.Interleave subBuilder = new global::Google.Bigtable.V1.RowFilter.Types.Interleave();
            if (filterCase_ == FilterOneofCase.Interleave) {
              subBuilder.MergeFrom(Interleave);
            }
            input.ReadMessage(subBuilder);
            Interleave = subBuilder;
            break;
          }
          case 26: {
            global::Google.Bigtable.V1.RowFilter.Types.Condition subBuilder = new global::Google.Bigtable.V1.RowFilter.Types.Condition();
            if (filterCase_ == FilterOneofCase.Condition) {
              subBuilder.MergeFrom(Condition);
            }
            input.ReadMessage(subBuilder);
            Condition = subBuilder;
            break;
          }
          case 34: {
            RowKeyRegexFilter = input.ReadBytes();
            break;
          }
          case 42: {
            FamilyNameRegexFilter = input.ReadString();
            break;
          }
          case 50: {
            ColumnQualifierRegexFilter = input.ReadBytes();
            break;
          }
          case 58: {
            global::Google.Bigtable.V1.ColumnRange subBuilder = new global::Google.Bigtable.V1.ColumnRange();
            if (filterCase_ == FilterOneofCase.ColumnRangeFilter) {
              subBuilder.MergeFrom(ColumnRangeFilter);
            }
            input.ReadMessage(subBuilder);
            ColumnRangeFilter = subBuilder;
            break;
          }
          case 66: {
            global::Google.Bigtable.V1.TimestampRange subBuilder = new global::Google.Bigtable.V1.TimestampRange();
            if (filterCase_ == FilterOneofCase.TimestampRangeFilter) {
              subBuilder.MergeFrom(TimestampRangeFilter);
            }
            input.ReadMessage(subBuilder);
            TimestampRangeFilter = subBuilder;
            break;
          }
          case 74: {
            ValueRegexFilter = input.ReadBytes();
            break;
          }
          case 80: {
            CellsPerRowOffsetFilter = input.ReadInt32();
            break;
          }
          case 88: {
            CellsPerRowLimitFilter = input.ReadInt32();
            break;
          }
          case 96: {
            CellsPerColumnLimitFilter = input.ReadInt32();
            break;
          }
          case 104: {
            StripValueTransformer = input.ReadBool();
            break;
          }
          case 113: {
            RowSampleFilter = input.ReadDouble();
            break;
          }
          case 122: {
            global::Google.Bigtable.V1.ValueRange subBuilder = new global::Google.Bigtable.V1.ValueRange();
            if (filterCase_ == FilterOneofCase.ValueRangeFilter) {
              subBuilder.MergeFrom(ValueRangeFilter);
            }
            input.ReadMessage(subBuilder);
            ValueRangeFilter = subBuilder;
            break;
          }
          case 128: {
            Sink = input.ReadBool();
            break;
          }
          case 136: {
            PassAllFilter = input.ReadBool();
            break;
          }
          case 144: {
            BlockAllFilter = input.ReadBool();
            break;
          }
          case 154: {
            ApplyLabelTransformer = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Chain : pb::IMessage<Chain> {
        private static readonly pb::MessageParser<Chain> _parser = new pb::MessageParser<Chain>(() => new Chain());
        public static pb::MessageParser<Chain> Parser { get { return _parser; } }

        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Bigtable.V1.RowFilter.Descriptor.NestedTypes[0]; }
        }

        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        public Chain() {
          OnConstruction();
        }

        partial void OnConstruction();

        public Chain(Chain other) : this() {
          filters_ = other.filters_.Clone();
        }

        public Chain Clone() {
          return new Chain(this);
        }

        public const int FiltersFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Google.Bigtable.V1.RowFilter> _repeated_filters_codec
            = pb::FieldCodec.ForMessage(10, global::Google.Bigtable.V1.RowFilter.Parser);
        private readonly pbc::RepeatedField<global::Google.Bigtable.V1.RowFilter> filters_ = new pbc::RepeatedField<global::Google.Bigtable.V1.RowFilter>();
        public pbc::RepeatedField<global::Google.Bigtable.V1.RowFilter> Filters {
          get { return filters_; }
        }

        public override bool Equals(object other) {
          return Equals(other as Chain);
        }

        public bool Equals(Chain other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!filters_.Equals(other.filters_)) return false;
          return true;
        }

        public override int GetHashCode() {
          int hash = 1;
          hash ^= filters_.GetHashCode();
          return hash;
        }

        public override string ToString() {
          return pb::JsonFormatter.Default.Format(this);
        }

        public void WriteTo(pb::CodedOutputStream output) {
          filters_.WriteTo(output, _repeated_filters_codec);
        }

        public int CalculateSize() {
          int size = 0;
          size += filters_.CalculateSize(_repeated_filters_codec);
          return size;
        }

        public void MergeFrom(Chain other) {
          if (other == null) {
            return;
          }
          filters_.Add(other.filters_);
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                filters_.AddEntriesFrom(input, _repeated_filters_codec);
                break;
              }
            }
          }
        }

      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Interleave : pb::IMessage<Interleave> {
        private static readonly pb::MessageParser<Interleave> _parser = new pb::MessageParser<Interleave>(() => new Interleave());
        public static pb::MessageParser<Interleave> Parser { get { return _parser; } }

        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Bigtable.V1.RowFilter.Descriptor.NestedTypes[1]; }
        }

        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        public Interleave() {
          OnConstruction();
        }

        partial void OnConstruction();

        public Interleave(Interleave other) : this() {
          filters_ = other.filters_.Clone();
        }

        public Interleave Clone() {
          return new Interleave(this);
        }

        public const int FiltersFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Google.Bigtable.V1.RowFilter> _repeated_filters_codec
            = pb::FieldCodec.ForMessage(10, global::Google.Bigtable.V1.RowFilter.Parser);
        private readonly pbc::RepeatedField<global::Google.Bigtable.V1.RowFilter> filters_ = new pbc::RepeatedField<global::Google.Bigtable.V1.RowFilter>();
        public pbc::RepeatedField<global::Google.Bigtable.V1.RowFilter> Filters {
          get { return filters_; }
        }

        public override bool Equals(object other) {
          return Equals(other as Interleave);
        }

        public bool Equals(Interleave other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!filters_.Equals(other.filters_)) return false;
          return true;
        }

        public override int GetHashCode() {
          int hash = 1;
          hash ^= filters_.GetHashCode();
          return hash;
        }

        public override string ToString() {
          return pb::JsonFormatter.Default.Format(this);
        }

        public void WriteTo(pb::CodedOutputStream output) {
          filters_.WriteTo(output, _repeated_filters_codec);
        }

        public int CalculateSize() {
          int size = 0;
          size += filters_.CalculateSize(_repeated_filters_codec);
          return size;
        }

        public void MergeFrom(Interleave other) {
          if (other == null) {
            return;
          }
          filters_.Add(other.filters_);
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                filters_.AddEntriesFrom(input, _repeated_filters_codec);
                break;
              }
            }
          }
        }

      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Condition : pb::IMessage<Condition> {
        private static readonly pb::MessageParser<Condition> _parser = new pb::MessageParser<Condition>(() => new Condition());
        public static pb::MessageParser<Condition> Parser { get { return _parser; } }

        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Bigtable.V1.RowFilter.Descriptor.NestedTypes[2]; }
        }

        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        public Condition() {
          OnConstruction();
        }

        partial void OnConstruction();

        public Condition(Condition other) : this() {
          PredicateFilter = other.predicateFilter_ != null ? other.PredicateFilter.Clone() : null;
          TrueFilter = other.trueFilter_ != null ? other.TrueFilter.Clone() : null;
          FalseFilter = other.falseFilter_ != null ? other.FalseFilter.Clone() : null;
        }

        public Condition Clone() {
          return new Condition(this);
        }

        public const int PredicateFilterFieldNumber = 1;
        private global::Google.Bigtable.V1.RowFilter predicateFilter_;
        public global::Google.Bigtable.V1.RowFilter PredicateFilter {
          get { return predicateFilter_; }
          set {
            predicateFilter_ = value;
          }
        }

        public const int TrueFilterFieldNumber = 2;
        private global::Google.Bigtable.V1.RowFilter trueFilter_;
        public global::Google.Bigtable.V1.RowFilter TrueFilter {
          get { return trueFilter_; }
          set {
            trueFilter_ = value;
          }
        }

        public const int FalseFilterFieldNumber = 3;
        private global::Google.Bigtable.V1.RowFilter falseFilter_;
        public global::Google.Bigtable.V1.RowFilter FalseFilter {
          get { return falseFilter_; }
          set {
            falseFilter_ = value;
          }
        }

        public override bool Equals(object other) {
          return Equals(other as Condition);
        }

        public bool Equals(Condition other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(PredicateFilter, other.PredicateFilter)) return false;
          if (!object.Equals(TrueFilter, other.TrueFilter)) return false;
          if (!object.Equals(FalseFilter, other.FalseFilter)) return false;
          return true;
        }

        public override int GetHashCode() {
          int hash = 1;
          if (predicateFilter_ != null) hash ^= PredicateFilter.GetHashCode();
          if (trueFilter_ != null) hash ^= TrueFilter.GetHashCode();
          if (falseFilter_ != null) hash ^= FalseFilter.GetHashCode();
          return hash;
        }

        public override string ToString() {
          return pb::JsonFormatter.Default.Format(this);
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (predicateFilter_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(PredicateFilter);
          }
          if (trueFilter_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(TrueFilter);
          }
          if (falseFilter_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(FalseFilter);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (predicateFilter_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(PredicateFilter);
          }
          if (trueFilter_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(TrueFilter);
          }
          if (falseFilter_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(FalseFilter);
          }
          return size;
        }

        public void MergeFrom(Condition other) {
          if (other == null) {
            return;
          }
          if (other.predicateFilter_ != null) {
            if (predicateFilter_ == null) {
              predicateFilter_ = new global::Google.Bigtable.V1.RowFilter();
            }
            PredicateFilter.MergeFrom(other.PredicateFilter);
          }
          if (other.trueFilter_ != null) {
            if (trueFilter_ == null) {
              trueFilter_ = new global::Google.Bigtable.V1.RowFilter();
            }
            TrueFilter.MergeFrom(other.TrueFilter);
          }
          if (other.falseFilter_ != null) {
            if (falseFilter_ == null) {
              falseFilter_ = new global::Google.Bigtable.V1.RowFilter();
            }
            FalseFilter.MergeFrom(other.FalseFilter);
          }
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                if (predicateFilter_ == null) {
                  predicateFilter_ = new global::Google.Bigtable.V1.RowFilter();
                }
                input.ReadMessage(predicateFilter_);
                break;
              }
              case 18: {
                if (trueFilter_ == null) {
                  trueFilter_ = new global::Google.Bigtable.V1.RowFilter();
                }
                input.ReadMessage(trueFilter_);
                break;
              }
              case 26: {
                if (falseFilter_ == null) {
                  falseFilter_ = new global::Google.Bigtable.V1.RowFilter();
                }
                input.ReadMessage(falseFilter_);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Mutation : pb::IMessage<Mutation> {
    private static readonly pb::MessageParser<Mutation> _parser = new pb::MessageParser<Mutation>(() => new Mutation());
    public static pb::MessageParser<Mutation> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Bigtable.V1.BigtableData.Descriptor.MessageTypes[9]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Mutation() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Mutation(Mutation other) : this() {
      switch (other.MutationCase) {
        case MutationOneofCase.SetCell:
          SetCell = other.SetCell.Clone();
          break;
        case MutationOneofCase.DeleteFromColumn:
          DeleteFromColumn = other.DeleteFromColumn.Clone();
          break;
        case MutationOneofCase.DeleteFromFamily:
          DeleteFromFamily = other.DeleteFromFamily.Clone();
          break;
        case MutationOneofCase.DeleteFromRow:
          DeleteFromRow = other.DeleteFromRow.Clone();
          break;
      }

    }

    public Mutation Clone() {
      return new Mutation(this);
    }

    public const int SetCellFieldNumber = 1;
    public global::Google.Bigtable.V1.Mutation.Types.SetCell SetCell {
      get { return mutationCase_ == MutationOneofCase.SetCell ? (global::Google.Bigtable.V1.Mutation.Types.SetCell) mutation_ : null; }
      set {
        mutation_ = value;
        mutationCase_ = value == null ? MutationOneofCase.None : MutationOneofCase.SetCell;
      }
    }

    public const int DeleteFromColumnFieldNumber = 2;
    public global::Google.Bigtable.V1.Mutation.Types.DeleteFromColumn DeleteFromColumn {
      get { return mutationCase_ == MutationOneofCase.DeleteFromColumn ? (global::Google.Bigtable.V1.Mutation.Types.DeleteFromColumn) mutation_ : null; }
      set {
        mutation_ = value;
        mutationCase_ = value == null ? MutationOneofCase.None : MutationOneofCase.DeleteFromColumn;
      }
    }

    public const int DeleteFromFamilyFieldNumber = 3;
    public global::Google.Bigtable.V1.Mutation.Types.DeleteFromFamily DeleteFromFamily {
      get { return mutationCase_ == MutationOneofCase.DeleteFromFamily ? (global::Google.Bigtable.V1.Mutation.Types.DeleteFromFamily) mutation_ : null; }
      set {
        mutation_ = value;
        mutationCase_ = value == null ? MutationOneofCase.None : MutationOneofCase.DeleteFromFamily;
      }
    }

    public const int DeleteFromRowFieldNumber = 4;
    public global::Google.Bigtable.V1.Mutation.Types.DeleteFromRow DeleteFromRow {
      get { return mutationCase_ == MutationOneofCase.DeleteFromRow ? (global::Google.Bigtable.V1.Mutation.Types.DeleteFromRow) mutation_ : null; }
      set {
        mutation_ = value;
        mutationCase_ = value == null ? MutationOneofCase.None : MutationOneofCase.DeleteFromRow;
      }
    }

    private object mutation_;
    public enum MutationOneofCase {
      None = 0,
      SetCell = 1,
      DeleteFromColumn = 2,
      DeleteFromFamily = 3,
      DeleteFromRow = 4,
    }
    private MutationOneofCase mutationCase_ = MutationOneofCase.None;
    public MutationOneofCase MutationCase {
      get { return mutationCase_; }
    }

    public void ClearMutation() {
      mutationCase_ = MutationOneofCase.None;
      mutation_ = null;
    }

    public override bool Equals(object other) {
      return Equals(other as Mutation);
    }

    public bool Equals(Mutation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(SetCell, other.SetCell)) return false;
      if (!object.Equals(DeleteFromColumn, other.DeleteFromColumn)) return false;
      if (!object.Equals(DeleteFromFamily, other.DeleteFromFamily)) return false;
      if (!object.Equals(DeleteFromRow, other.DeleteFromRow)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (mutationCase_ == MutationOneofCase.SetCell) hash ^= SetCell.GetHashCode();
      if (mutationCase_ == MutationOneofCase.DeleteFromColumn) hash ^= DeleteFromColumn.GetHashCode();
      if (mutationCase_ == MutationOneofCase.DeleteFromFamily) hash ^= DeleteFromFamily.GetHashCode();
      if (mutationCase_ == MutationOneofCase.DeleteFromRow) hash ^= DeleteFromRow.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (mutationCase_ == MutationOneofCase.SetCell) {
        output.WriteRawTag(10);
        output.WriteMessage(SetCell);
      }
      if (mutationCase_ == MutationOneofCase.DeleteFromColumn) {
        output.WriteRawTag(18);
        output.WriteMessage(DeleteFromColumn);
      }
      if (mutationCase_ == MutationOneofCase.DeleteFromFamily) {
        output.WriteRawTag(26);
        output.WriteMessage(DeleteFromFamily);
      }
      if (mutationCase_ == MutationOneofCase.DeleteFromRow) {
        output.WriteRawTag(34);
        output.WriteMessage(DeleteFromRow);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (mutationCase_ == MutationOneofCase.SetCell) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SetCell);
      }
      if (mutationCase_ == MutationOneofCase.DeleteFromColumn) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DeleteFromColumn);
      }
      if (mutationCase_ == MutationOneofCase.DeleteFromFamily) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DeleteFromFamily);
      }
      if (mutationCase_ == MutationOneofCase.DeleteFromRow) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DeleteFromRow);
      }
      return size;
    }

    public void MergeFrom(Mutation other) {
      if (other == null) {
        return;
      }
      switch (other.MutationCase) {
        case MutationOneofCase.SetCell:
          SetCell = other.SetCell;
          break;
        case MutationOneofCase.DeleteFromColumn:
          DeleteFromColumn = other.DeleteFromColumn;
          break;
        case MutationOneofCase.DeleteFromFamily:
          DeleteFromFamily = other.DeleteFromFamily;
          break;
        case MutationOneofCase.DeleteFromRow:
          DeleteFromRow = other.DeleteFromRow;
          break;
      }

    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::Google.Bigtable.V1.Mutation.Types.SetCell subBuilder = new global::Google.Bigtable.V1.Mutation.Types.SetCell();
            if (mutationCase_ == MutationOneofCase.SetCell) {
              subBuilder.MergeFrom(SetCell);
            }
            input.ReadMessage(subBuilder);
            SetCell = subBuilder;
            break;
          }
          case 18: {
            global::Google.Bigtable.V1.Mutation.Types.DeleteFromColumn subBuilder = new global::Google.Bigtable.V1.Mutation.Types.DeleteFromColumn();
            if (mutationCase_ == MutationOneofCase.DeleteFromColumn) {
              subBuilder.MergeFrom(DeleteFromColumn);
            }
            input.ReadMessage(subBuilder);
            DeleteFromColumn = subBuilder;
            break;
          }
          case 26: {
            global::Google.Bigtable.V1.Mutation.Types.DeleteFromFamily subBuilder = new global::Google.Bigtable.V1.Mutation.Types.DeleteFromFamily();
            if (mutationCase_ == MutationOneofCase.DeleteFromFamily) {
              subBuilder.MergeFrom(DeleteFromFamily);
            }
            input.ReadMessage(subBuilder);
            DeleteFromFamily = subBuilder;
            break;
          }
          case 34: {
            global::Google.Bigtable.V1.Mutation.Types.DeleteFromRow subBuilder = new global::Google.Bigtable.V1.Mutation.Types.DeleteFromRow();
            if (mutationCase_ == MutationOneofCase.DeleteFromRow) {
              subBuilder.MergeFrom(DeleteFromRow);
            }
            input.ReadMessage(subBuilder);
            DeleteFromRow = subBuilder;
            break;
          }
        }
      }
    }

    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class SetCell : pb::IMessage<SetCell> {
        private static readonly pb::MessageParser<SetCell> _parser = new pb::MessageParser<SetCell>(() => new SetCell());
        public static pb::MessageParser<SetCell> Parser { get { return _parser; } }

        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Bigtable.V1.Mutation.Descriptor.NestedTypes[0]; }
        }

        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        public SetCell() {
          OnConstruction();
        }

        partial void OnConstruction();

        public SetCell(SetCell other) : this() {
          familyName_ = other.familyName_;
          columnQualifier_ = other.columnQualifier_;
          timestampMicros_ = other.timestampMicros_;
          value_ = other.value_;
        }

        public SetCell Clone() {
          return new SetCell(this);
        }

        public const int FamilyNameFieldNumber = 1;
        private string familyName_ = "";
        public string FamilyName {
          get { return familyName_; }
          set {
            familyName_ = pb::Preconditions.CheckNotNull(value, "value");
          }
        }

        public const int ColumnQualifierFieldNumber = 2;
        private pb::ByteString columnQualifier_ = pb::ByteString.Empty;
        public pb::ByteString ColumnQualifier {
          get { return columnQualifier_; }
          set {
            columnQualifier_ = pb::Preconditions.CheckNotNull(value, "value");
          }
        }

        public const int TimestampMicrosFieldNumber = 3;
        private long timestampMicros_;
        public long TimestampMicros {
          get { return timestampMicros_; }
          set {
            timestampMicros_ = value;
          }
        }

        public const int ValueFieldNumber = 4;
        private pb::ByteString value_ = pb::ByteString.Empty;
        public pb::ByteString Value {
          get { return value_; }
          set {
            value_ = pb::Preconditions.CheckNotNull(value, "value");
          }
        }

        public override bool Equals(object other) {
          return Equals(other as SetCell);
        }

        public bool Equals(SetCell other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (FamilyName != other.FamilyName) return false;
          if (ColumnQualifier != other.ColumnQualifier) return false;
          if (TimestampMicros != other.TimestampMicros) return false;
          if (Value != other.Value) return false;
          return true;
        }

        public override int GetHashCode() {
          int hash = 1;
          if (FamilyName.Length != 0) hash ^= FamilyName.GetHashCode();
          if (ColumnQualifier.Length != 0) hash ^= ColumnQualifier.GetHashCode();
          if (TimestampMicros != 0L) hash ^= TimestampMicros.GetHashCode();
          if (Value.Length != 0) hash ^= Value.GetHashCode();
          return hash;
        }

        public override string ToString() {
          return pb::JsonFormatter.Default.Format(this);
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (FamilyName.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(FamilyName);
          }
          if (ColumnQualifier.Length != 0) {
            output.WriteRawTag(18);
            output.WriteBytes(ColumnQualifier);
          }
          if (TimestampMicros != 0L) {
            output.WriteRawTag(24);
            output.WriteInt64(TimestampMicros);
          }
          if (Value.Length != 0) {
            output.WriteRawTag(34);
            output.WriteBytes(Value);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (FamilyName.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(FamilyName);
          }
          if (ColumnQualifier.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(ColumnQualifier);
          }
          if (TimestampMicros != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(TimestampMicros);
          }
          if (Value.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(Value);
          }
          return size;
        }

        public void MergeFrom(SetCell other) {
          if (other == null) {
            return;
          }
          if (other.FamilyName.Length != 0) {
            FamilyName = other.FamilyName;
          }
          if (other.ColumnQualifier.Length != 0) {
            ColumnQualifier = other.ColumnQualifier;
          }
          if (other.TimestampMicros != 0L) {
            TimestampMicros = other.TimestampMicros;
          }
          if (other.Value.Length != 0) {
            Value = other.Value;
          }
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                FamilyName = input.ReadString();
                break;
              }
              case 18: {
                ColumnQualifier = input.ReadBytes();
                break;
              }
              case 24: {
                TimestampMicros = input.ReadInt64();
                break;
              }
              case 34: {
                Value = input.ReadBytes();
                break;
              }
            }
          }
        }

      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class DeleteFromColumn : pb::IMessage<DeleteFromColumn> {
        private static readonly pb::MessageParser<DeleteFromColumn> _parser = new pb::MessageParser<DeleteFromColumn>(() => new DeleteFromColumn());
        public static pb::MessageParser<DeleteFromColumn> Parser { get { return _parser; } }

        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Bigtable.V1.Mutation.Descriptor.NestedTypes[1]; }
        }

        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        public DeleteFromColumn() {
          OnConstruction();
        }

        partial void OnConstruction();

        public DeleteFromColumn(DeleteFromColumn other) : this() {
          familyName_ = other.familyName_;
          columnQualifier_ = other.columnQualifier_;
          TimeRange = other.timeRange_ != null ? other.TimeRange.Clone() : null;
        }

        public DeleteFromColumn Clone() {
          return new DeleteFromColumn(this);
        }

        public const int FamilyNameFieldNumber = 1;
        private string familyName_ = "";
        public string FamilyName {
          get { return familyName_; }
          set {
            familyName_ = pb::Preconditions.CheckNotNull(value, "value");
          }
        }

        public const int ColumnQualifierFieldNumber = 2;
        private pb::ByteString columnQualifier_ = pb::ByteString.Empty;
        public pb::ByteString ColumnQualifier {
          get { return columnQualifier_; }
          set {
            columnQualifier_ = pb::Preconditions.CheckNotNull(value, "value");
          }
        }

        public const int TimeRangeFieldNumber = 3;
        private global::Google.Bigtable.V1.TimestampRange timeRange_;
        public global::Google.Bigtable.V1.TimestampRange TimeRange {
          get { return timeRange_; }
          set {
            timeRange_ = value;
          }
        }

        public override bool Equals(object other) {
          return Equals(other as DeleteFromColumn);
        }

        public bool Equals(DeleteFromColumn other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (FamilyName != other.FamilyName) return false;
          if (ColumnQualifier != other.ColumnQualifier) return false;
          if (!object.Equals(TimeRange, other.TimeRange)) return false;
          return true;
        }

        public override int GetHashCode() {
          int hash = 1;
          if (FamilyName.Length != 0) hash ^= FamilyName.GetHashCode();
          if (ColumnQualifier.Length != 0) hash ^= ColumnQualifier.GetHashCode();
          if (timeRange_ != null) hash ^= TimeRange.GetHashCode();
          return hash;
        }

        public override string ToString() {
          return pb::JsonFormatter.Default.Format(this);
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (FamilyName.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(FamilyName);
          }
          if (ColumnQualifier.Length != 0) {
            output.WriteRawTag(18);
            output.WriteBytes(ColumnQualifier);
          }
          if (timeRange_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(TimeRange);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (FamilyName.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(FamilyName);
          }
          if (ColumnQualifier.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(ColumnQualifier);
          }
          if (timeRange_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(TimeRange);
          }
          return size;
        }

        public void MergeFrom(DeleteFromColumn other) {
          if (other == null) {
            return;
          }
          if (other.FamilyName.Length != 0) {
            FamilyName = other.FamilyName;
          }
          if (other.ColumnQualifier.Length != 0) {
            ColumnQualifier = other.ColumnQualifier;
          }
          if (other.timeRange_ != null) {
            if (timeRange_ == null) {
              timeRange_ = new global::Google.Bigtable.V1.TimestampRange();
            }
            TimeRange.MergeFrom(other.TimeRange);
          }
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                FamilyName = input.ReadString();
                break;
              }
              case 18: {
                ColumnQualifier = input.ReadBytes();
                break;
              }
              case 26: {
                if (timeRange_ == null) {
                  timeRange_ = new global::Google.Bigtable.V1.TimestampRange();
                }
                input.ReadMessage(timeRange_);
                break;
              }
            }
          }
        }

      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class DeleteFromFamily : pb::IMessage<DeleteFromFamily> {
        private static readonly pb::MessageParser<DeleteFromFamily> _parser = new pb::MessageParser<DeleteFromFamily>(() => new DeleteFromFamily());
        public static pb::MessageParser<DeleteFromFamily> Parser { get { return _parser; } }

        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Bigtable.V1.Mutation.Descriptor.NestedTypes[2]; }
        }

        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        public DeleteFromFamily() {
          OnConstruction();
        }

        partial void OnConstruction();

        public DeleteFromFamily(DeleteFromFamily other) : this() {
          familyName_ = other.familyName_;
        }

        public DeleteFromFamily Clone() {
          return new DeleteFromFamily(this);
        }

        public const int FamilyNameFieldNumber = 1;
        private string familyName_ = "";
        public string FamilyName {
          get { return familyName_; }
          set {
            familyName_ = pb::Preconditions.CheckNotNull(value, "value");
          }
        }

        public override bool Equals(object other) {
          return Equals(other as DeleteFromFamily);
        }

        public bool Equals(DeleteFromFamily other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (FamilyName != other.FamilyName) return false;
          return true;
        }

        public override int GetHashCode() {
          int hash = 1;
          if (FamilyName.Length != 0) hash ^= FamilyName.GetHashCode();
          return hash;
        }

        public override string ToString() {
          return pb::JsonFormatter.Default.Format(this);
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (FamilyName.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(FamilyName);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (FamilyName.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(FamilyName);
          }
          return size;
        }

        public void MergeFrom(DeleteFromFamily other) {
          if (other == null) {
            return;
          }
          if (other.FamilyName.Length != 0) {
            FamilyName = other.FamilyName;
          }
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                FamilyName = input.ReadString();
                break;
              }
            }
          }
        }

      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class DeleteFromRow : pb::IMessage<DeleteFromRow> {
        private static readonly pb::MessageParser<DeleteFromRow> _parser = new pb::MessageParser<DeleteFromRow>(() => new DeleteFromRow());
        public static pb::MessageParser<DeleteFromRow> Parser { get { return _parser; } }

        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Bigtable.V1.Mutation.Descriptor.NestedTypes[3]; }
        }

        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        public DeleteFromRow() {
          OnConstruction();
        }

        partial void OnConstruction();

        public DeleteFromRow(DeleteFromRow other) : this() {
        }

        public DeleteFromRow Clone() {
          return new DeleteFromRow(this);
        }

        public override bool Equals(object other) {
          return Equals(other as DeleteFromRow);
        }

        public bool Equals(DeleteFromRow other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          return true;
        }

        public override int GetHashCode() {
          int hash = 1;
          return hash;
        }

        public override string ToString() {
          return pb::JsonFormatter.Default.Format(this);
        }

        public void WriteTo(pb::CodedOutputStream output) {
        }

        public int CalculateSize() {
          int size = 0;
          return size;
        }

        public void MergeFrom(DeleteFromRow other) {
          if (other == null) {
            return;
          }
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
            }
          }
        }

      }

    }
    #endregion

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ReadModifyWriteRule : pb::IMessage<ReadModifyWriteRule> {
    private static readonly pb::MessageParser<ReadModifyWriteRule> _parser = new pb::MessageParser<ReadModifyWriteRule>(() => new ReadModifyWriteRule());
    public static pb::MessageParser<ReadModifyWriteRule> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Bigtable.V1.BigtableData.Descriptor.MessageTypes[10]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public ReadModifyWriteRule() {
      OnConstruction();
    }

    partial void OnConstruction();

    public ReadModifyWriteRule(ReadModifyWriteRule other) : this() {
      familyName_ = other.familyName_;
      columnQualifier_ = other.columnQualifier_;
      switch (other.RuleCase) {
        case RuleOneofCase.AppendValue:
          AppendValue = other.AppendValue;
          break;
        case RuleOneofCase.IncrementAmount:
          IncrementAmount = other.IncrementAmount;
          break;
      }

    }

    public ReadModifyWriteRule Clone() {
      return new ReadModifyWriteRule(this);
    }

    public const int FamilyNameFieldNumber = 1;
    private string familyName_ = "";
    public string FamilyName {
      get { return familyName_; }
      set {
        familyName_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int ColumnQualifierFieldNumber = 2;
    private pb::ByteString columnQualifier_ = pb::ByteString.Empty;
    public pb::ByteString ColumnQualifier {
      get { return columnQualifier_; }
      set {
        columnQualifier_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int AppendValueFieldNumber = 3;
    public pb::ByteString AppendValue {
      get { return ruleCase_ == RuleOneofCase.AppendValue ? (pb::ByteString) rule_ : pb::ByteString.Empty; }
      set {
        rule_ = pb::Preconditions.CheckNotNull(value, "value");
        ruleCase_ = RuleOneofCase.AppendValue;
      }
    }

    public const int IncrementAmountFieldNumber = 4;
    public long IncrementAmount {
      get { return ruleCase_ == RuleOneofCase.IncrementAmount ? (long) rule_ : 0L; }
      set {
        rule_ = value;
        ruleCase_ = RuleOneofCase.IncrementAmount;
      }
    }

    private object rule_;
    public enum RuleOneofCase {
      None = 0,
      AppendValue = 3,
      IncrementAmount = 4,
    }
    private RuleOneofCase ruleCase_ = RuleOneofCase.None;
    public RuleOneofCase RuleCase {
      get { return ruleCase_; }
    }

    public void ClearRule() {
      ruleCase_ = RuleOneofCase.None;
      rule_ = null;
    }

    public override bool Equals(object other) {
      return Equals(other as ReadModifyWriteRule);
    }

    public bool Equals(ReadModifyWriteRule other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FamilyName != other.FamilyName) return false;
      if (ColumnQualifier != other.ColumnQualifier) return false;
      if (AppendValue != other.AppendValue) return false;
      if (IncrementAmount != other.IncrementAmount) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (FamilyName.Length != 0) hash ^= FamilyName.GetHashCode();
      if (ColumnQualifier.Length != 0) hash ^= ColumnQualifier.GetHashCode();
      if (ruleCase_ == RuleOneofCase.AppendValue) hash ^= AppendValue.GetHashCode();
      if (ruleCase_ == RuleOneofCase.IncrementAmount) hash ^= IncrementAmount.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (FamilyName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FamilyName);
      }
      if (ColumnQualifier.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(ColumnQualifier);
      }
      if (ruleCase_ == RuleOneofCase.AppendValue) {
        output.WriteRawTag(26);
        output.WriteBytes(AppendValue);
      }
      if (ruleCase_ == RuleOneofCase.IncrementAmount) {
        output.WriteRawTag(32);
        output.WriteInt64(IncrementAmount);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (FamilyName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FamilyName);
      }
      if (ColumnQualifier.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ColumnQualifier);
      }
      if (ruleCase_ == RuleOneofCase.AppendValue) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(AppendValue);
      }
      if (ruleCase_ == RuleOneofCase.IncrementAmount) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(IncrementAmount);
      }
      return size;
    }

    public void MergeFrom(ReadModifyWriteRule other) {
      if (other == null) {
        return;
      }
      if (other.FamilyName.Length != 0) {
        FamilyName = other.FamilyName;
      }
      if (other.ColumnQualifier.Length != 0) {
        ColumnQualifier = other.ColumnQualifier;
      }
      switch (other.RuleCase) {
        case RuleOneofCase.AppendValue:
          AppendValue = other.AppendValue;
          break;
        case RuleOneofCase.IncrementAmount:
          IncrementAmount = other.IncrementAmount;
          break;
      }

    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            FamilyName = input.ReadString();
            break;
          }
          case 18: {
            ColumnQualifier = input.ReadBytes();
            break;
          }
          case 26: {
            AppendValue = input.ReadBytes();
            break;
          }
          case 32: {
            IncrementAmount = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
