// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/bigtable/admin/cluster/v1/bigtable_cluster_service.proto
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using Grpc.Core;

namespace Google.Bigtable.Admin.Cluster.V1 {
  public static class BigtableClusterService
  {
    static readonly string __ServiceName = "google.bigtable.admin.cluster.v1.BigtableClusterService";

    static readonly Marshaller<global::Google.Bigtable.Admin.Cluster.V1.ListZonesRequest> __Marshaller_ListZonesRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Bigtable.Admin.Cluster.V1.ListZonesRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Bigtable.Admin.Cluster.V1.ListZonesResponse> __Marshaller_ListZonesResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Bigtable.Admin.Cluster.V1.ListZonesResponse.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Bigtable.Admin.Cluster.V1.GetClusterRequest> __Marshaller_GetClusterRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Bigtable.Admin.Cluster.V1.GetClusterRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Bigtable.Admin.Cluster.V1.Cluster> __Marshaller_Cluster = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Bigtable.Admin.Cluster.V1.Cluster.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Bigtable.Admin.Cluster.V1.ListClustersRequest> __Marshaller_ListClustersRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Bigtable.Admin.Cluster.V1.ListClustersRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Bigtable.Admin.Cluster.V1.ListClustersResponse> __Marshaller_ListClustersResponse = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Bigtable.Admin.Cluster.V1.ListClustersResponse.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Bigtable.Admin.Cluster.V1.CreateClusterRequest> __Marshaller_CreateClusterRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Bigtable.Admin.Cluster.V1.CreateClusterRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Bigtable.Admin.Cluster.V1.DeleteClusterRequest> __Marshaller_DeleteClusterRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Bigtable.Admin.Cluster.V1.DeleteClusterRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Protobuf.Empty> __Marshaller_Empty = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Protobuf.Empty.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Bigtable.Admin.Cluster.V1.UndeleteClusterRequest> __Marshaller_UndeleteClusterRequest = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Bigtable.Admin.Cluster.V1.UndeleteClusterRequest.Parser.ParseFrom);
    static readonly Marshaller<global::Google.Longrunning.Operation> __Marshaller_Operation = Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Longrunning.Operation.Parser.ParseFrom);

    static readonly Method<global::Google.Bigtable.Admin.Cluster.V1.ListZonesRequest, global::Google.Bigtable.Admin.Cluster.V1.ListZonesResponse> __Method_ListZones = new Method<global::Google.Bigtable.Admin.Cluster.V1.ListZonesRequest, global::Google.Bigtable.Admin.Cluster.V1.ListZonesResponse>(
        MethodType.Unary,
        __ServiceName,
        "ListZones",
        __Marshaller_ListZonesRequest,
        __Marshaller_ListZonesResponse);

    static readonly Method<global::Google.Bigtable.Admin.Cluster.V1.GetClusterRequest, global::Google.Bigtable.Admin.Cluster.V1.Cluster> __Method_GetCluster = new Method<global::Google.Bigtable.Admin.Cluster.V1.GetClusterRequest, global::Google.Bigtable.Admin.Cluster.V1.Cluster>(
        MethodType.Unary,
        __ServiceName,
        "GetCluster",
        __Marshaller_GetClusterRequest,
        __Marshaller_Cluster);

    static readonly Method<global::Google.Bigtable.Admin.Cluster.V1.ListClustersRequest, global::Google.Bigtable.Admin.Cluster.V1.ListClustersResponse> __Method_ListClusters = new Method<global::Google.Bigtable.Admin.Cluster.V1.ListClustersRequest, global::Google.Bigtable.Admin.Cluster.V1.ListClustersResponse>(
        MethodType.Unary,
        __ServiceName,
        "ListClusters",
        __Marshaller_ListClustersRequest,
        __Marshaller_ListClustersResponse);

    static readonly Method<global::Google.Bigtable.Admin.Cluster.V1.CreateClusterRequest, global::Google.Bigtable.Admin.Cluster.V1.Cluster> __Method_CreateCluster = new Method<global::Google.Bigtable.Admin.Cluster.V1.CreateClusterRequest, global::Google.Bigtable.Admin.Cluster.V1.Cluster>(
        MethodType.Unary,
        __ServiceName,
        "CreateCluster",
        __Marshaller_CreateClusterRequest,
        __Marshaller_Cluster);

    static readonly Method<global::Google.Bigtable.Admin.Cluster.V1.Cluster, global::Google.Bigtable.Admin.Cluster.V1.Cluster> __Method_UpdateCluster = new Method<global::Google.Bigtable.Admin.Cluster.V1.Cluster, global::Google.Bigtable.Admin.Cluster.V1.Cluster>(
        MethodType.Unary,
        __ServiceName,
        "UpdateCluster",
        __Marshaller_Cluster,
        __Marshaller_Cluster);

    static readonly Method<global::Google.Bigtable.Admin.Cluster.V1.DeleteClusterRequest, global::Google.Protobuf.Empty> __Method_DeleteCluster = new Method<global::Google.Bigtable.Admin.Cluster.V1.DeleteClusterRequest, global::Google.Protobuf.Empty>(
        MethodType.Unary,
        __ServiceName,
        "DeleteCluster",
        __Marshaller_DeleteClusterRequest,
        __Marshaller_Empty);

    static readonly Method<global::Google.Bigtable.Admin.Cluster.V1.UndeleteClusterRequest, global::Google.Longrunning.Operation> __Method_UndeleteCluster = new Method<global::Google.Bigtable.Admin.Cluster.V1.UndeleteClusterRequest, global::Google.Longrunning.Operation>(
        MethodType.Unary,
        __ServiceName,
        "UndeleteCluster",
        __Marshaller_UndeleteClusterRequest,
        __Marshaller_Operation);

    // service descriptor
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Google.Bigtable.Admin.Cluster.V1.Proto.BigtableClusterService.Descriptor.Services[0]; }
    }

    // client interface
    public interface IBigtableClusterServiceClient
    {
      global::Google.Bigtable.Admin.Cluster.V1.ListZonesResponse ListZones(global::Google.Bigtable.Admin.Cluster.V1.ListZonesRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      global::Google.Bigtable.Admin.Cluster.V1.ListZonesResponse ListZones(global::Google.Bigtable.Admin.Cluster.V1.ListZonesRequest request, CallOptions options);
      AsyncUnaryCall<global::Google.Bigtable.Admin.Cluster.V1.ListZonesResponse> ListZonesAsync(global::Google.Bigtable.Admin.Cluster.V1.ListZonesRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncUnaryCall<global::Google.Bigtable.Admin.Cluster.V1.ListZonesResponse> ListZonesAsync(global::Google.Bigtable.Admin.Cluster.V1.ListZonesRequest request, CallOptions options);
      global::Google.Bigtable.Admin.Cluster.V1.Cluster GetCluster(global::Google.Bigtable.Admin.Cluster.V1.GetClusterRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      global::Google.Bigtable.Admin.Cluster.V1.Cluster GetCluster(global::Google.Bigtable.Admin.Cluster.V1.GetClusterRequest request, CallOptions options);
      AsyncUnaryCall<global::Google.Bigtable.Admin.Cluster.V1.Cluster> GetClusterAsync(global::Google.Bigtable.Admin.Cluster.V1.GetClusterRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncUnaryCall<global::Google.Bigtable.Admin.Cluster.V1.Cluster> GetClusterAsync(global::Google.Bigtable.Admin.Cluster.V1.GetClusterRequest request, CallOptions options);
      global::Google.Bigtable.Admin.Cluster.V1.ListClustersResponse ListClusters(global::Google.Bigtable.Admin.Cluster.V1.ListClustersRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      global::Google.Bigtable.Admin.Cluster.V1.ListClustersResponse ListClusters(global::Google.Bigtable.Admin.Cluster.V1.ListClustersRequest request, CallOptions options);
      AsyncUnaryCall<global::Google.Bigtable.Admin.Cluster.V1.ListClustersResponse> ListClustersAsync(global::Google.Bigtable.Admin.Cluster.V1.ListClustersRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncUnaryCall<global::Google.Bigtable.Admin.Cluster.V1.ListClustersResponse> ListClustersAsync(global::Google.Bigtable.Admin.Cluster.V1.ListClustersRequest request, CallOptions options);
      global::Google.Bigtable.Admin.Cluster.V1.Cluster CreateCluster(global::Google.Bigtable.Admin.Cluster.V1.CreateClusterRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      global::Google.Bigtable.Admin.Cluster.V1.Cluster CreateCluster(global::Google.Bigtable.Admin.Cluster.V1.CreateClusterRequest request, CallOptions options);
      AsyncUnaryCall<global::Google.Bigtable.Admin.Cluster.V1.Cluster> CreateClusterAsync(global::Google.Bigtable.Admin.Cluster.V1.CreateClusterRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncUnaryCall<global::Google.Bigtable.Admin.Cluster.V1.Cluster> CreateClusterAsync(global::Google.Bigtable.Admin.Cluster.V1.CreateClusterRequest request, CallOptions options);
      global::Google.Bigtable.Admin.Cluster.V1.Cluster UpdateCluster(global::Google.Bigtable.Admin.Cluster.V1.Cluster request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      global::Google.Bigtable.Admin.Cluster.V1.Cluster UpdateCluster(global::Google.Bigtable.Admin.Cluster.V1.Cluster request, CallOptions options);
      AsyncUnaryCall<global::Google.Bigtable.Admin.Cluster.V1.Cluster> UpdateClusterAsync(global::Google.Bigtable.Admin.Cluster.V1.Cluster request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncUnaryCall<global::Google.Bigtable.Admin.Cluster.V1.Cluster> UpdateClusterAsync(global::Google.Bigtable.Admin.Cluster.V1.Cluster request, CallOptions options);
      global::Google.Protobuf.Empty DeleteCluster(global::Google.Bigtable.Admin.Cluster.V1.DeleteClusterRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      global::Google.Protobuf.Empty DeleteCluster(global::Google.Bigtable.Admin.Cluster.V1.DeleteClusterRequest request, CallOptions options);
      AsyncUnaryCall<global::Google.Protobuf.Empty> DeleteClusterAsync(global::Google.Bigtable.Admin.Cluster.V1.DeleteClusterRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncUnaryCall<global::Google.Protobuf.Empty> DeleteClusterAsync(global::Google.Bigtable.Admin.Cluster.V1.DeleteClusterRequest request, CallOptions options);
      global::Google.Longrunning.Operation UndeleteCluster(global::Google.Bigtable.Admin.Cluster.V1.UndeleteClusterRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      global::Google.Longrunning.Operation UndeleteCluster(global::Google.Bigtable.Admin.Cluster.V1.UndeleteClusterRequest request, CallOptions options);
      AsyncUnaryCall<global::Google.Longrunning.Operation> UndeleteClusterAsync(global::Google.Bigtable.Admin.Cluster.V1.UndeleteClusterRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken));
      AsyncUnaryCall<global::Google.Longrunning.Operation> UndeleteClusterAsync(global::Google.Bigtable.Admin.Cluster.V1.UndeleteClusterRequest request, CallOptions options);
    }

    // server-side interface
    public interface IBigtableClusterService
    {
      Task<global::Google.Bigtable.Admin.Cluster.V1.ListZonesResponse> ListZones(global::Google.Bigtable.Admin.Cluster.V1.ListZonesRequest request, ServerCallContext context);
      Task<global::Google.Bigtable.Admin.Cluster.V1.Cluster> GetCluster(global::Google.Bigtable.Admin.Cluster.V1.GetClusterRequest request, ServerCallContext context);
      Task<global::Google.Bigtable.Admin.Cluster.V1.ListClustersResponse> ListClusters(global::Google.Bigtable.Admin.Cluster.V1.ListClustersRequest request, ServerCallContext context);
      Task<global::Google.Bigtable.Admin.Cluster.V1.Cluster> CreateCluster(global::Google.Bigtable.Admin.Cluster.V1.CreateClusterRequest request, ServerCallContext context);
      Task<global::Google.Bigtable.Admin.Cluster.V1.Cluster> UpdateCluster(global::Google.Bigtable.Admin.Cluster.V1.Cluster request, ServerCallContext context);
      Task<global::Google.Protobuf.Empty> DeleteCluster(global::Google.Bigtable.Admin.Cluster.V1.DeleteClusterRequest request, ServerCallContext context);
      Task<global::Google.Longrunning.Operation> UndeleteCluster(global::Google.Bigtable.Admin.Cluster.V1.UndeleteClusterRequest request, ServerCallContext context);
    }

    // client stub
    public class BigtableClusterServiceClient : ClientBase, IBigtableClusterServiceClient
    {
      public BigtableClusterServiceClient(Channel channel) : base(channel)
      {
      }
      public global::Google.Bigtable.Admin.Cluster.V1.ListZonesResponse ListZones(global::Google.Bigtable.Admin.Cluster.V1.ListZonesRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_ListZones, new CallOptions(headers, deadline, cancellationToken));
        return Calls.BlockingUnaryCall(call, request);
      }
      public global::Google.Bigtable.Admin.Cluster.V1.ListZonesResponse ListZones(global::Google.Bigtable.Admin.Cluster.V1.ListZonesRequest request, CallOptions options)
      {
        var call = CreateCall(__Method_ListZones, options);
        return Calls.BlockingUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::Google.Bigtable.Admin.Cluster.V1.ListZonesResponse> ListZonesAsync(global::Google.Bigtable.Admin.Cluster.V1.ListZonesRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_ListZones, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::Google.Bigtable.Admin.Cluster.V1.ListZonesResponse> ListZonesAsync(global::Google.Bigtable.Admin.Cluster.V1.ListZonesRequest request, CallOptions options)
      {
        var call = CreateCall(__Method_ListZones, options);
        return Calls.AsyncUnaryCall(call, request);
      }
      public global::Google.Bigtable.Admin.Cluster.V1.Cluster GetCluster(global::Google.Bigtable.Admin.Cluster.V1.GetClusterRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_GetCluster, new CallOptions(headers, deadline, cancellationToken));
        return Calls.BlockingUnaryCall(call, request);
      }
      public global::Google.Bigtable.Admin.Cluster.V1.Cluster GetCluster(global::Google.Bigtable.Admin.Cluster.V1.GetClusterRequest request, CallOptions options)
      {
        var call = CreateCall(__Method_GetCluster, options);
        return Calls.BlockingUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::Google.Bigtable.Admin.Cluster.V1.Cluster> GetClusterAsync(global::Google.Bigtable.Admin.Cluster.V1.GetClusterRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_GetCluster, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::Google.Bigtable.Admin.Cluster.V1.Cluster> GetClusterAsync(global::Google.Bigtable.Admin.Cluster.V1.GetClusterRequest request, CallOptions options)
      {
        var call = CreateCall(__Method_GetCluster, options);
        return Calls.AsyncUnaryCall(call, request);
      }
      public global::Google.Bigtable.Admin.Cluster.V1.ListClustersResponse ListClusters(global::Google.Bigtable.Admin.Cluster.V1.ListClustersRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_ListClusters, new CallOptions(headers, deadline, cancellationToken));
        return Calls.BlockingUnaryCall(call, request);
      }
      public global::Google.Bigtable.Admin.Cluster.V1.ListClustersResponse ListClusters(global::Google.Bigtable.Admin.Cluster.V1.ListClustersRequest request, CallOptions options)
      {
        var call = CreateCall(__Method_ListClusters, options);
        return Calls.BlockingUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::Google.Bigtable.Admin.Cluster.V1.ListClustersResponse> ListClustersAsync(global::Google.Bigtable.Admin.Cluster.V1.ListClustersRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_ListClusters, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::Google.Bigtable.Admin.Cluster.V1.ListClustersResponse> ListClustersAsync(global::Google.Bigtable.Admin.Cluster.V1.ListClustersRequest request, CallOptions options)
      {
        var call = CreateCall(__Method_ListClusters, options);
        return Calls.AsyncUnaryCall(call, request);
      }
      public global::Google.Bigtable.Admin.Cluster.V1.Cluster CreateCluster(global::Google.Bigtable.Admin.Cluster.V1.CreateClusterRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_CreateCluster, new CallOptions(headers, deadline, cancellationToken));
        return Calls.BlockingUnaryCall(call, request);
      }
      public global::Google.Bigtable.Admin.Cluster.V1.Cluster CreateCluster(global::Google.Bigtable.Admin.Cluster.V1.CreateClusterRequest request, CallOptions options)
      {
        var call = CreateCall(__Method_CreateCluster, options);
        return Calls.BlockingUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::Google.Bigtable.Admin.Cluster.V1.Cluster> CreateClusterAsync(global::Google.Bigtable.Admin.Cluster.V1.CreateClusterRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_CreateCluster, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::Google.Bigtable.Admin.Cluster.V1.Cluster> CreateClusterAsync(global::Google.Bigtable.Admin.Cluster.V1.CreateClusterRequest request, CallOptions options)
      {
        var call = CreateCall(__Method_CreateCluster, options);
        return Calls.AsyncUnaryCall(call, request);
      }
      public global::Google.Bigtable.Admin.Cluster.V1.Cluster UpdateCluster(global::Google.Bigtable.Admin.Cluster.V1.Cluster request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_UpdateCluster, new CallOptions(headers, deadline, cancellationToken));
        return Calls.BlockingUnaryCall(call, request);
      }
      public global::Google.Bigtable.Admin.Cluster.V1.Cluster UpdateCluster(global::Google.Bigtable.Admin.Cluster.V1.Cluster request, CallOptions options)
      {
        var call = CreateCall(__Method_UpdateCluster, options);
        return Calls.BlockingUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::Google.Bigtable.Admin.Cluster.V1.Cluster> UpdateClusterAsync(global::Google.Bigtable.Admin.Cluster.V1.Cluster request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_UpdateCluster, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::Google.Bigtable.Admin.Cluster.V1.Cluster> UpdateClusterAsync(global::Google.Bigtable.Admin.Cluster.V1.Cluster request, CallOptions options)
      {
        var call = CreateCall(__Method_UpdateCluster, options);
        return Calls.AsyncUnaryCall(call, request);
      }
      public global::Google.Protobuf.Empty DeleteCluster(global::Google.Bigtable.Admin.Cluster.V1.DeleteClusterRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_DeleteCluster, new CallOptions(headers, deadline, cancellationToken));
        return Calls.BlockingUnaryCall(call, request);
      }
      public global::Google.Protobuf.Empty DeleteCluster(global::Google.Bigtable.Admin.Cluster.V1.DeleteClusterRequest request, CallOptions options)
      {
        var call = CreateCall(__Method_DeleteCluster, options);
        return Calls.BlockingUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::Google.Protobuf.Empty> DeleteClusterAsync(global::Google.Bigtable.Admin.Cluster.V1.DeleteClusterRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_DeleteCluster, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::Google.Protobuf.Empty> DeleteClusterAsync(global::Google.Bigtable.Admin.Cluster.V1.DeleteClusterRequest request, CallOptions options)
      {
        var call = CreateCall(__Method_DeleteCluster, options);
        return Calls.AsyncUnaryCall(call, request);
      }
      public global::Google.Longrunning.Operation UndeleteCluster(global::Google.Bigtable.Admin.Cluster.V1.UndeleteClusterRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_UndeleteCluster, new CallOptions(headers, deadline, cancellationToken));
        return Calls.BlockingUnaryCall(call, request);
      }
      public global::Google.Longrunning.Operation UndeleteCluster(global::Google.Bigtable.Admin.Cluster.V1.UndeleteClusterRequest request, CallOptions options)
      {
        var call = CreateCall(__Method_UndeleteCluster, options);
        return Calls.BlockingUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::Google.Longrunning.Operation> UndeleteClusterAsync(global::Google.Bigtable.Admin.Cluster.V1.UndeleteClusterRequest request, Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        var call = CreateCall(__Method_UndeleteCluster, new CallOptions(headers, deadline, cancellationToken));
        return Calls.AsyncUnaryCall(call, request);
      }
      public AsyncUnaryCall<global::Google.Longrunning.Operation> UndeleteClusterAsync(global::Google.Bigtable.Admin.Cluster.V1.UndeleteClusterRequest request, CallOptions options)
      {
        var call = CreateCall(__Method_UndeleteCluster, options);
        return Calls.AsyncUnaryCall(call, request);
      }
    }

    // creates service definition that can be registered with a server
    public static ServerServiceDefinition BindService(IBigtableClusterService serviceImpl)
    {
      return ServerServiceDefinition.CreateBuilder(__ServiceName)
          .AddMethod(__Method_ListZones, serviceImpl.ListZones)
          .AddMethod(__Method_GetCluster, serviceImpl.GetCluster)
          .AddMethod(__Method_ListClusters, serviceImpl.ListClusters)
          .AddMethod(__Method_CreateCluster, serviceImpl.CreateCluster)
          .AddMethod(__Method_UpdateCluster, serviceImpl.UpdateCluster)
          .AddMethod(__Method_DeleteCluster, serviceImpl.DeleteCluster)
          .AddMethod(__Method_UndeleteCluster, serviceImpl.UndeleteCluster).Build();
    }

    // creates a new client
    public static BigtableClusterServiceClient NewClient(Channel channel)
    {
      return new BigtableClusterServiceClient(channel);
    }

  }
}
#endregion
