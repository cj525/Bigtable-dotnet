// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/rpc/error_details.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Google.Rpc {

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class ErrorDetails {

    #region Descriptor
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ErrorDetails() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch5nb29nbGUvcnBjL2Vycm9yX2RldGFpbHMucHJvdG8SCmdvb2dsZS5ycGMa", 
            "Hmdvb2dsZS9wcm90b2J1Zi9kdXJhdGlvbi5wcm90byI7CglSZXRyeUluZm8S", 
            "LgoLcmV0cnlfZGVsYXkYASABKAsyGS5nb29nbGUucHJvdG9idWYuRHVyYXRp", 
            "b24iMgoJRGVidWdJbmZvEhUKDXN0YWNrX2VudHJpZXMYASADKAkSDgoGZGV0", 
            "YWlsGAIgASgJInkKDFF1b3RhRmFpbHVyZRI2Cgp2aW9sYXRpb25zGAEgAygL", 
            "MiIuZ29vZ2xlLnJwYy5RdW90YUZhaWx1cmUuVmlvbGF0aW9uGjEKCVZpb2xh", 
            "dGlvbhIPCgdzdWJqZWN0GAEgASgJEhMKC2Rlc2NyaXB0aW9uGAIgASgJIoMB", 
            "CgpCYWRSZXF1ZXN0Ej8KEGZpZWxkX3Zpb2xhdGlvbnMYASADKAsyJS5nb29n", 
            "bGUucnBjLkJhZFJlcXVlc3QuRmllbGRWaW9sYXRpb24aNAoORmllbGRWaW9s", 
            "YXRpb24SDQoFZmllbGQYASABKAkSEwoLZGVzY3JpcHRpb24YAiABKAkiNwoL", 
            "UmVxdWVzdEluZm8SEgoKcmVxdWVzdF9pZBgBIAEoCRIUCgxzZXJ2aW5nX2Rh", 
            "dGEYAiABKAkiYAoMUmVzb3VyY2VJbmZvEhUKDXJlc291cmNlX3R5cGUYASAB", 
            "KAkSFQoNcmVzb3VyY2VfbmFtZRgCIAEoCRINCgVvd25lchgDIAEoCRITCgtk", 
            "ZXNjcmlwdGlvbhgEIAEoCSJWCgRIZWxwEiQKBWxpbmtzGAEgAygLMhUuZ29v", 
            "Z2xlLnJwYy5IZWxwLkxpbmsaKAoETGluaxITCgtkZXNjcmlwdGlvbhgBIAEo", 
            "CRILCgN1cmwYAiABKAlCJQoOY29tLmdvb2dsZS5ycGNCEUVycm9yRGV0YWls", 
            "c1Byb3RvUAFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.Proto.Duration.Descriptor, },
          new pbr::GeneratedCodeInfo(null, new pbr::GeneratedCodeInfo[] {
            new pbr::GeneratedCodeInfo(typeof(global::Google.Rpc.RetryInfo), new[]{ "RetryDelay" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Google.Rpc.DebugInfo), new[]{ "StackEntries", "Detail" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Google.Rpc.QuotaFailure), new[]{ "Violations" }, null, null, new pbr::GeneratedCodeInfo[] { new pbr::GeneratedCodeInfo(typeof(global::Google.Rpc.QuotaFailure.Types.Violation), new[]{ "Subject", "Description" }, null, null, null)}),
            new pbr::GeneratedCodeInfo(typeof(global::Google.Rpc.BadRequest), new[]{ "FieldViolations" }, null, null, new pbr::GeneratedCodeInfo[] { new pbr::GeneratedCodeInfo(typeof(global::Google.Rpc.BadRequest.Types.FieldViolation), new[]{ "Field", "Description" }, null, null, null)}),
            new pbr::GeneratedCodeInfo(typeof(global::Google.Rpc.RequestInfo), new[]{ "RequestId", "ServingData" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Google.Rpc.ResourceInfo), new[]{ "ResourceType", "ResourceName", "Owner", "Description" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::Google.Rpc.Help), new[]{ "Links" }, null, null, new pbr::GeneratedCodeInfo[] { new pbr::GeneratedCodeInfo(typeof(global::Google.Rpc.Help.Types.Link), new[]{ "Description", "Url" }, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class RetryInfo : pb::IMessage<RetryInfo> {
    private static readonly pb::MessageParser<RetryInfo> _parser = new pb::MessageParser<RetryInfo>(() => new RetryInfo());
    public static pb::MessageParser<RetryInfo> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Rpc.ErrorDetails.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public RetryInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    public RetryInfo(RetryInfo other) : this() {
      RetryDelay = other.retryDelay_ != null ? other.RetryDelay.Clone() : null;
    }

    public RetryInfo Clone() {
      return new RetryInfo(this);
    }

    public const int RetryDelayFieldNumber = 1;
    private global::Google.Protobuf.Duration retryDelay_;
    public global::Google.Protobuf.Duration RetryDelay {
      get { return retryDelay_; }
      set {
        retryDelay_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as RetryInfo);
    }

    public bool Equals(RetryInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RetryDelay, other.RetryDelay)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (retryDelay_ != null) hash ^= RetryDelay.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (retryDelay_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RetryDelay);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (retryDelay_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RetryDelay);
      }
      return size;
    }

    public void MergeFrom(RetryInfo other) {
      if (other == null) {
        return;
      }
      if (other.retryDelay_ != null) {
        if (retryDelay_ == null) {
          retryDelay_ = new global::Google.Protobuf.Duration();
        }
        RetryDelay.MergeFrom(other.RetryDelay);
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (retryDelay_ == null) {
              retryDelay_ = new global::Google.Protobuf.Duration();
            }
            input.ReadMessage(retryDelay_);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class DebugInfo : pb::IMessage<DebugInfo> {
    private static readonly pb::MessageParser<DebugInfo> _parser = new pb::MessageParser<DebugInfo>(() => new DebugInfo());
    public static pb::MessageParser<DebugInfo> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Rpc.ErrorDetails.Descriptor.MessageTypes[1]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public DebugInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    public DebugInfo(DebugInfo other) : this() {
      stackEntries_ = other.stackEntries_.Clone();
      detail_ = other.detail_;
    }

    public DebugInfo Clone() {
      return new DebugInfo(this);
    }

    public const int StackEntriesFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_stackEntries_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> stackEntries_ = new pbc::RepeatedField<string>();
    public pbc::RepeatedField<string> StackEntries {
      get { return stackEntries_; }
    }

    public const int DetailFieldNumber = 2;
    private string detail_ = "";
    public string Detail {
      get { return detail_; }
      set {
        detail_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as DebugInfo);
    }

    public bool Equals(DebugInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!stackEntries_.Equals(other.stackEntries_)) return false;
      if (Detail != other.Detail) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= stackEntries_.GetHashCode();
      if (Detail.Length != 0) hash ^= Detail.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      stackEntries_.WriteTo(output, _repeated_stackEntries_codec);
      if (Detail.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Detail);
      }
    }

    public int CalculateSize() {
      int size = 0;
      size += stackEntries_.CalculateSize(_repeated_stackEntries_codec);
      if (Detail.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Detail);
      }
      return size;
    }

    public void MergeFrom(DebugInfo other) {
      if (other == null) {
        return;
      }
      stackEntries_.Add(other.stackEntries_);
      if (other.Detail.Length != 0) {
        Detail = other.Detail;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            stackEntries_.AddEntriesFrom(input, _repeated_stackEntries_codec);
            break;
          }
          case 18: {
            Detail = input.ReadString();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class QuotaFailure : pb::IMessage<QuotaFailure> {
    private static readonly pb::MessageParser<QuotaFailure> _parser = new pb::MessageParser<QuotaFailure>(() => new QuotaFailure());
    public static pb::MessageParser<QuotaFailure> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Rpc.ErrorDetails.Descriptor.MessageTypes[2]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public QuotaFailure() {
      OnConstruction();
    }

    partial void OnConstruction();

    public QuotaFailure(QuotaFailure other) : this() {
      violations_ = other.violations_.Clone();
    }

    public QuotaFailure Clone() {
      return new QuotaFailure(this);
    }

    public const int ViolationsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Google.Rpc.QuotaFailure.Types.Violation> _repeated_violations_codec
        = pb::FieldCodec.ForMessage(10, global::Google.Rpc.QuotaFailure.Types.Violation.Parser);
    private readonly pbc::RepeatedField<global::Google.Rpc.QuotaFailure.Types.Violation> violations_ = new pbc::RepeatedField<global::Google.Rpc.QuotaFailure.Types.Violation>();
    public pbc::RepeatedField<global::Google.Rpc.QuotaFailure.Types.Violation> Violations {
      get { return violations_; }
    }

    public override bool Equals(object other) {
      return Equals(other as QuotaFailure);
    }

    public bool Equals(QuotaFailure other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!violations_.Equals(other.violations_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= violations_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      violations_.WriteTo(output, _repeated_violations_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += violations_.CalculateSize(_repeated_violations_codec);
      return size;
    }

    public void MergeFrom(QuotaFailure other) {
      if (other == null) {
        return;
      }
      violations_.Add(other.violations_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            violations_.AddEntriesFrom(input, _repeated_violations_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Violation : pb::IMessage<Violation> {
        private static readonly pb::MessageParser<Violation> _parser = new pb::MessageParser<Violation>(() => new Violation());
        public static pb::MessageParser<Violation> Parser { get { return _parser; } }

        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Rpc.QuotaFailure.Descriptor.NestedTypes[0]; }
        }

        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        public Violation() {
          OnConstruction();
        }

        partial void OnConstruction();

        public Violation(Violation other) : this() {
          subject_ = other.subject_;
          description_ = other.description_;
        }

        public Violation Clone() {
          return new Violation(this);
        }

        public const int SubjectFieldNumber = 1;
        private string subject_ = "";
        public string Subject {
          get { return subject_; }
          set {
            subject_ = pb::Preconditions.CheckNotNull(value, "value");
          }
        }

        public const int DescriptionFieldNumber = 2;
        private string description_ = "";
        public string Description {
          get { return description_; }
          set {
            description_ = pb::Preconditions.CheckNotNull(value, "value");
          }
        }

        public override bool Equals(object other) {
          return Equals(other as Violation);
        }

        public bool Equals(Violation other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Subject != other.Subject) return false;
          if (Description != other.Description) return false;
          return true;
        }

        public override int GetHashCode() {
          int hash = 1;
          if (Subject.Length != 0) hash ^= Subject.GetHashCode();
          if (Description.Length != 0) hash ^= Description.GetHashCode();
          return hash;
        }

        public override string ToString() {
          return pb::JsonFormatter.Default.Format(this);
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (Subject.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Subject);
          }
          if (Description.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Description);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (Subject.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Subject);
          }
          if (Description.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
          }
          return size;
        }

        public void MergeFrom(Violation other) {
          if (other == null) {
            return;
          }
          if (other.Subject.Length != 0) {
            Subject = other.Subject;
          }
          if (other.Description.Length != 0) {
            Description = other.Description;
          }
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                Subject = input.ReadString();
                break;
              }
              case 18: {
                Description = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class BadRequest : pb::IMessage<BadRequest> {
    private static readonly pb::MessageParser<BadRequest> _parser = new pb::MessageParser<BadRequest>(() => new BadRequest());
    public static pb::MessageParser<BadRequest> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Rpc.ErrorDetails.Descriptor.MessageTypes[3]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public BadRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    public BadRequest(BadRequest other) : this() {
      fieldViolations_ = other.fieldViolations_.Clone();
    }

    public BadRequest Clone() {
      return new BadRequest(this);
    }

    public const int FieldViolationsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Google.Rpc.BadRequest.Types.FieldViolation> _repeated_fieldViolations_codec
        = pb::FieldCodec.ForMessage(10, global::Google.Rpc.BadRequest.Types.FieldViolation.Parser);
    private readonly pbc::RepeatedField<global::Google.Rpc.BadRequest.Types.FieldViolation> fieldViolations_ = new pbc::RepeatedField<global::Google.Rpc.BadRequest.Types.FieldViolation>();
    public pbc::RepeatedField<global::Google.Rpc.BadRequest.Types.FieldViolation> FieldViolations {
      get { return fieldViolations_; }
    }

    public override bool Equals(object other) {
      return Equals(other as BadRequest);
    }

    public bool Equals(BadRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!fieldViolations_.Equals(other.fieldViolations_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= fieldViolations_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      fieldViolations_.WriteTo(output, _repeated_fieldViolations_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += fieldViolations_.CalculateSize(_repeated_fieldViolations_codec);
      return size;
    }

    public void MergeFrom(BadRequest other) {
      if (other == null) {
        return;
      }
      fieldViolations_.Add(other.fieldViolations_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            fieldViolations_.AddEntriesFrom(input, _repeated_fieldViolations_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class FieldViolation : pb::IMessage<FieldViolation> {
        private static readonly pb::MessageParser<FieldViolation> _parser = new pb::MessageParser<FieldViolation>(() => new FieldViolation());
        public static pb::MessageParser<FieldViolation> Parser { get { return _parser; } }

        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Rpc.BadRequest.Descriptor.NestedTypes[0]; }
        }

        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        public FieldViolation() {
          OnConstruction();
        }

        partial void OnConstruction();

        public FieldViolation(FieldViolation other) : this() {
          field_ = other.field_;
          description_ = other.description_;
        }

        public FieldViolation Clone() {
          return new FieldViolation(this);
        }

        public const int FieldFieldNumber = 1;
        private string field_ = "";
        public string Field {
          get { return field_; }
          set {
            field_ = pb::Preconditions.CheckNotNull(value, "value");
          }
        }

        public const int DescriptionFieldNumber = 2;
        private string description_ = "";
        public string Description {
          get { return description_; }
          set {
            description_ = pb::Preconditions.CheckNotNull(value, "value");
          }
        }

        public override bool Equals(object other) {
          return Equals(other as FieldViolation);
        }

        public bool Equals(FieldViolation other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Field != other.Field) return false;
          if (Description != other.Description) return false;
          return true;
        }

        public override int GetHashCode() {
          int hash = 1;
          if (Field.Length != 0) hash ^= Field.GetHashCode();
          if (Description.Length != 0) hash ^= Description.GetHashCode();
          return hash;
        }

        public override string ToString() {
          return pb::JsonFormatter.Default.Format(this);
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (Field.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Field);
          }
          if (Description.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Description);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (Field.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Field);
          }
          if (Description.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
          }
          return size;
        }

        public void MergeFrom(FieldViolation other) {
          if (other == null) {
            return;
          }
          if (other.Field.Length != 0) {
            Field = other.Field;
          }
          if (other.Description.Length != 0) {
            Description = other.Description;
          }
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                Field = input.ReadString();
                break;
              }
              case 18: {
                Description = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class RequestInfo : pb::IMessage<RequestInfo> {
    private static readonly pb::MessageParser<RequestInfo> _parser = new pb::MessageParser<RequestInfo>(() => new RequestInfo());
    public static pb::MessageParser<RequestInfo> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Rpc.ErrorDetails.Descriptor.MessageTypes[4]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public RequestInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    public RequestInfo(RequestInfo other) : this() {
      requestId_ = other.requestId_;
      servingData_ = other.servingData_;
    }

    public RequestInfo Clone() {
      return new RequestInfo(this);
    }

    public const int RequestIdFieldNumber = 1;
    private string requestId_ = "";
    public string RequestId {
      get { return requestId_; }
      set {
        requestId_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int ServingDataFieldNumber = 2;
    private string servingData_ = "";
    public string ServingData {
      get { return servingData_; }
      set {
        servingData_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as RequestInfo);
    }

    public bool Equals(RequestInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RequestId != other.RequestId) return false;
      if (ServingData != other.ServingData) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (RequestId.Length != 0) hash ^= RequestId.GetHashCode();
      if (ServingData.Length != 0) hash ^= ServingData.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RequestId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RequestId);
      }
      if (ServingData.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ServingData);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RequestId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RequestId);
      }
      if (ServingData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServingData);
      }
      return size;
    }

    public void MergeFrom(RequestInfo other) {
      if (other == null) {
        return;
      }
      if (other.RequestId.Length != 0) {
        RequestId = other.RequestId;
      }
      if (other.ServingData.Length != 0) {
        ServingData = other.ServingData;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            RequestId = input.ReadString();
            break;
          }
          case 18: {
            ServingData = input.ReadString();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ResourceInfo : pb::IMessage<ResourceInfo> {
    private static readonly pb::MessageParser<ResourceInfo> _parser = new pb::MessageParser<ResourceInfo>(() => new ResourceInfo());
    public static pb::MessageParser<ResourceInfo> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Rpc.ErrorDetails.Descriptor.MessageTypes[5]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public ResourceInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    public ResourceInfo(ResourceInfo other) : this() {
      resourceType_ = other.resourceType_;
      resourceName_ = other.resourceName_;
      owner_ = other.owner_;
      description_ = other.description_;
    }

    public ResourceInfo Clone() {
      return new ResourceInfo(this);
    }

    public const int ResourceTypeFieldNumber = 1;
    private string resourceType_ = "";
    public string ResourceType {
      get { return resourceType_; }
      set {
        resourceType_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int ResourceNameFieldNumber = 2;
    private string resourceName_ = "";
    public string ResourceName {
      get { return resourceName_; }
      set {
        resourceName_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int OwnerFieldNumber = 3;
    private string owner_ = "";
    public string Owner {
      get { return owner_; }
      set {
        owner_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int DescriptionFieldNumber = 4;
    private string description_ = "";
    public string Description {
      get { return description_; }
      set {
        description_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as ResourceInfo);
    }

    public bool Equals(ResourceInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ResourceType != other.ResourceType) return false;
      if (ResourceName != other.ResourceName) return false;
      if (Owner != other.Owner) return false;
      if (Description != other.Description) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (ResourceType.Length != 0) hash ^= ResourceType.GetHashCode();
      if (ResourceName.Length != 0) hash ^= ResourceName.GetHashCode();
      if (Owner.Length != 0) hash ^= Owner.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ResourceType.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ResourceType);
      }
      if (ResourceName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ResourceName);
      }
      if (Owner.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Owner);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Description);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ResourceType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ResourceType);
      }
      if (ResourceName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ResourceName);
      }
      if (Owner.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Owner);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      return size;
    }

    public void MergeFrom(ResourceInfo other) {
      if (other == null) {
        return;
      }
      if (other.ResourceType.Length != 0) {
        ResourceType = other.ResourceType;
      }
      if (other.ResourceName.Length != 0) {
        ResourceName = other.ResourceName;
      }
      if (other.Owner.Length != 0) {
        Owner = other.Owner;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ResourceType = input.ReadString();
            break;
          }
          case 18: {
            ResourceName = input.ReadString();
            break;
          }
          case 26: {
            Owner = input.ReadString();
            break;
          }
          case 34: {
            Description = input.ReadString();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Help : pb::IMessage<Help> {
    private static readonly pb::MessageParser<Help> _parser = new pb::MessageParser<Help>(() => new Help());
    public static pb::MessageParser<Help> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::Google.Rpc.ErrorDetails.Descriptor.MessageTypes[6]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Help() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Help(Help other) : this() {
      links_ = other.links_.Clone();
    }

    public Help Clone() {
      return new Help(this);
    }

    public const int LinksFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Google.Rpc.Help.Types.Link> _repeated_links_codec
        = pb::FieldCodec.ForMessage(10, global::Google.Rpc.Help.Types.Link.Parser);
    private readonly pbc::RepeatedField<global::Google.Rpc.Help.Types.Link> links_ = new pbc::RepeatedField<global::Google.Rpc.Help.Types.Link>();
    public pbc::RepeatedField<global::Google.Rpc.Help.Types.Link> Links {
      get { return links_; }
    }

    public override bool Equals(object other) {
      return Equals(other as Help);
    }

    public bool Equals(Help other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!links_.Equals(other.links_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= links_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      links_.WriteTo(output, _repeated_links_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += links_.CalculateSize(_repeated_links_codec);
      return size;
    }

    public void MergeFrom(Help other) {
      if (other == null) {
        return;
      }
      links_.Add(other.links_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            links_.AddEntriesFrom(input, _repeated_links_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Link : pb::IMessage<Link> {
        private static readonly pb::MessageParser<Link> _parser = new pb::MessageParser<Link>(() => new Link());
        public static pb::MessageParser<Link> Parser { get { return _parser; } }

        public static pbr::MessageDescriptor Descriptor {
          get { return global::Google.Rpc.Help.Descriptor.NestedTypes[0]; }
        }

        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        public Link() {
          OnConstruction();
        }

        partial void OnConstruction();

        public Link(Link other) : this() {
          description_ = other.description_;
          url_ = other.url_;
        }

        public Link Clone() {
          return new Link(this);
        }

        public const int DescriptionFieldNumber = 1;
        private string description_ = "";
        public string Description {
          get { return description_; }
          set {
            description_ = pb::Preconditions.CheckNotNull(value, "value");
          }
        }

        public const int UrlFieldNumber = 2;
        private string url_ = "";
        public string Url {
          get { return url_; }
          set {
            url_ = pb::Preconditions.CheckNotNull(value, "value");
          }
        }

        public override bool Equals(object other) {
          return Equals(other as Link);
        }

        public bool Equals(Link other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Description != other.Description) return false;
          if (Url != other.Url) return false;
          return true;
        }

        public override int GetHashCode() {
          int hash = 1;
          if (Description.Length != 0) hash ^= Description.GetHashCode();
          if (Url.Length != 0) hash ^= Url.GetHashCode();
          return hash;
        }

        public override string ToString() {
          return pb::JsonFormatter.Default.Format(this);
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (Description.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Description);
          }
          if (Url.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Url);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (Description.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
          }
          if (Url.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Url);
          }
          return size;
        }

        public void MergeFrom(Link other) {
          if (other == null) {
            return;
          }
          if (other.Description.Length != 0) {
            Description = other.Description;
          }
          if (other.Url.Length != 0) {
            Url = other.Url;
          }
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                Description = input.ReadString();
                break;
              }
              case 18: {
                Url = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
